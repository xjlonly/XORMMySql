using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.IO;

namespace MySQL.NetDBS
{
    public class DBS_CCDBOper
    {
        #region 变量
        /// <summary>
        /// 命名控件头,如:Vending.DatasInfo
        /// </summary>
        private string _namespaceHead = string.Empty;
        /// <summary>
        /// 文件根目录,如:D:/Vending.DatasInfo
        /// </summary>
        private string _folderHead = string.Empty;
        /// <summary>
        /// 表名
        /// </summary>
        private string _tableName = string.Empty;
        /// <summary>
        /// 表结构数据表
        /// </summary>
        private DataTable DT = null;
        /// <summary>
        /// 实体类命名空间头
        /// </summary>
        private string _NamespaceClasses = string.Empty;
        /// <summary>
        /// 数据操作类命名空间头
        /// </summary>
        private string _NamespaceDbu = "XORM.Db";
        /// <summary>
        /// 查询请求是否采用只读字符串
        /// </summary>
        private bool _UseReadOnlyForSelect = true;
        /// <summary>
        /// 函数定义是否只读标记
        /// </summary>
        private string URFS = "true";

        private string _DbConnectionConfigMark = "";
        #endregion

        #region 构造函数
        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dt">表结构</param>
        /// <param name="NameSpaceHead">命名控件头,如:CECC.DatasInfo</param>
        /// <param name="FolderHead">文件根目录,如:D:/CECC.DatasInfo</param>
        /// <param name="NamespaceClasses">实体类命名空间头</param>
        /// <param name="NamespaceDBU">数据操作类命名空间头</param>
        /// <param name="TableName">表名</param>
        public DBS_CCDBOper(DataTable dt, string NameSpaceHead, string FolderHead, string TableName, string NamespaceClasses, string DbConnectionConfigMark, bool UseReadOnlyForSelect = true)
        {
            this.DT = dt;
            DBS_CCDBOper dbsCcdbOper = this;
            string str1 = NameSpaceHead;
            char[] chArray = new char[1];
            int index = 0;
            int num = 46;
            chArray[index] = (char)num;
            string str2 = str1.TrimEnd(chArray);
            dbsCcdbOper._namespaceHead = str2;
            this._folderHead = FolderHead;
            this._tableName = TableName;
            this._NamespaceClasses = NamespaceClasses;
            this._UseReadOnlyForSelect = UseReadOnlyForSelect;
            this.URFS = !this._UseReadOnlyForSelect ? "false" : "true";
            this._DbConnectionConfigMark = DbConnectionConfigMark;
        }
        #endregion

        #region 创建文件内容
        /// <summary>
        /// 创建文件内容
        /// </summary>
        /// <returns></returns>
        public string CreateFileContent()
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine("using System;");
            stringBuilder1.AppendLine("using System.Collections.Generic;");
            stringBuilder1.AppendLine("using System.Data;");
            stringBuilder1.AppendLine("using System.Data.SqlClient;");
            stringBuilder1.AppendLine("using System.Text;");
            stringBuilder1.AppendLine("using System.Text.RegularExpressions;");
            stringBuilder1.AppendLine("using System.Data.SqlTypes;");
            stringBuilder1.AppendLine("using System.Xml;");
            stringBuilder1.AppendLine("using MySql.Data;");
            stringBuilder1.AppendLine("using MySql.Data.MySqlClient;");
            StringBuilder stringBuilder2 = stringBuilder1;
            string str1 = "using ";
            string str2 = this._NamespaceClasses;
            char[] chArray = new char[1];
            int index = 0;
            int num = 46;
            chArray[index] = (char)num;
            string str3 = str2.TrimEnd(chArray);
            string str4 = ";";
            string str5 = str1 + str3 + str4;
            stringBuilder2.AppendLine(str5);
            stringBuilder1.AppendLine("using " + this._NamespaceDbu + ";");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("namespace " + this._namespaceHead);
            stringBuilder1.AppendLine("{");
            stringBuilder1.AppendLine("\t/// <summary>");
            stringBuilder1.AppendLine("\t/// 数据库操作:" + this._tableName);
            stringBuilder1.AppendLine("\t/// </summary>");
            stringBuilder1.AppendLine("\tpublic class " + this._tableName);
            stringBuilder1.AppendLine("\t{");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 默认查询是否用只读串");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            if (this._UseReadOnlyForSelect)
                stringBuilder1.AppendLine("\t\tpublic static bool ReadOnlyDataSource = true;");
            else
                stringBuilder1.AppendLine("\t\tpublic static bool ReadOnlyDataSource = false;");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 数据库链接配置前缀");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\tpublic static string ConnectionConfigMark = \"" + this._DbConnectionConfigMark + "\";");
            stringBuilder1.AppendLine(this.GetSelectContent());
            stringBuilder1.AppendLine(this.GetDeleteContent());
            stringBuilder1.AppendLine(this.GetUpdateContent());
            stringBuilder1.AppendLine(this.GetInsertContent());
            stringBuilder1.AppendLine(this.GetParametersContent());
            stringBuilder1.AppendLine("\t}");
            stringBuilder1.Append("}");
            return ((object)stringBuilder1).ToString();
        }
        #endregion

        #region 查询语句
        /// <summary>
        /// 查询语句
        /// </summary>
        /// <returns></returns>
        private string GetSelectContent()
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine("\t\t#region 查询");
            stringBuilder1.AppendLine("\t\t#region 查询：返回数据表");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：返回数据表");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，可带参数，如username='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">需要查询的字段列表,如:ID,Name,CreateTime,默认*或空标识全部字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static DataTable GetTable(string sqlWhere = \"\", string sqlSort = \"\", string sqlCols = \"*\", object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = new DataTable();");
            stringBuilder1.AppendLine("\t\t\tstring txtCols = sqlCols;");
            stringBuilder1.AppendLine("\t\t\tif (string.IsNullOrEmpty(sqlCols))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\ttxtCols = \"*\";");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"SELECT \" + sqlCols + \" FROM " + this._tableName + " \");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlSort))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" ORDER BY \").Append(sqlSort);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder1.AppendLine("\t\t\ttable = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecDataTable(cmd);");
            stringBuilder1.AppendLine("\t\t\tif (table == null)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\ttable = new DataTable();");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\ttable.TableName = \"table\";");
            stringBuilder1.AppendLine("\t\t\treturn table;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 内分组查询");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：内分组查询数据");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionWhere\">内分组条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionSort\">内分组排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionBy\">内分组字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionRange\">内分组筛选行号</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，可带参数，如username='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">需要查询的字段列表,如:ID,Name,CreateTime,默认*或空标识全部字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <return></return>");
            stringBuilder1.AppendLine("\t\tpublic static List<T> GetInnerSortList<T>(string sqlPartitionWhere = \"\", string sqlPartitionSort = \"\", string sqlPartitionBy = \"\", List<int> sqlPartitionRange = null, string sqlWhere = \"\", string sqlSort = \"\", string sqlCols = \"*\", object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetInnerSortTable(sqlPartitionWhere, sqlPartitionSort, sqlPartitionBy, sqlPartitionRange, sqlWhere, sqlSort, sqlCols, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\tList<T> rtnObjList = new List<T>();");
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add((T)System.Activator.CreateInstance(typeof(T), dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：内分组查询数据");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionWhere\">内分组条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionSort\">内分组排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionBy\">内分组字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionRange\">内分组筛选行号</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，可带参数，如username='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">需要查询的字段列表,如:ID,Name,CreateTime,默认*或空标识全部字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <return></return>");
            StringBuilder stringBuilder2 = stringBuilder1;
            string[] strArray1 = new string[6];
            int index1 = 0;
            string str1 = "\t\tpublic static List<";
            strArray1[index1] = str1;
            int index2 = 1;
            string str2 = this._NamespaceClasses;
            strArray1[index2] = str2;
            int index3 = 2;
            string str3 = this._tableName;
            strArray1[index3] = str3;
            int index4 = 3;
            string str4 = "> GetInnerSortList(string sqlPartitionWhere = \"\", string sqlPartitionSort = \"\", string sqlPartitionBy = \"\", List<int> sqlPartitionRange = null, string sqlWhere = \"\", string sqlSort = \"\", string sqlCols = \"*\", object[] ParamsList = null, bool ReadOnlyDataSource = ";
            strArray1[index4] = str4;
            int index5 = 4;
            string str5 = this.URFS;
            strArray1[index5] = str5;
            int index6 = 5;
            string str6 = ")";
            strArray1[index6] = str6;
            string str7 = string.Concat(strArray1);
            stringBuilder2.AppendLine(str7);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetInnerSortTable(sqlPartitionWhere, sqlPartitionSort, sqlPartitionBy, sqlPartitionRange, sqlWhere, sqlSort, sqlCols, ParamsList, ReadOnlyDataSource);");
            StringBuilder stringBuilder3 = stringBuilder1;
            string[] strArray2 = new string[7];
            int index7 = 0;
            string str8 = "\t\t\tList<";
            strArray2[index7] = str8;
            int index8 = 1;
            string str9 = this._NamespaceClasses;
            strArray2[index8] = str9;
            int index9 = 2;
            string str10 = this._tableName;
            strArray2[index9] = str10;
            int index10 = 3;
            string str11 = "> rtnObjList = new List<";
            strArray2[index10] = str11;
            int index11 = 4;
            string str12 = this._NamespaceClasses;
            strArray2[index11] = str12;
            int index12 = 5;
            string str13 = this._tableName;
            strArray2[index12] = str13;
            int index13 = 6;
            string str14 = ">();";
            strArray2[index13] = str14;
            string str15 = string.Concat(strArray2);
            stringBuilder3.AppendLine(str15);
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add(new " + this._NamespaceClasses + this._tableName + "(dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 查询：内分组查询-返回数据表");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：内分组查询-返回数据表");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionWhere\">内分组条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionSort\">内分组排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionBy\">内分组字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlPartitionRange\">内分组筛选行号</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，可带参数，如username='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">需要查询的字段列表,如:ID,Name,CreateTime,默认*或空标识全部字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static DataTable GetInnerSortTable(string sqlPartitionWhere = \"\", string sqlPartitionSort = \"\", string sqlPartitionBy = \"\", List<int> sqlPartitionRange = null, string sqlWhere = \"\", string sqlSort = \"\", string sqlCols = \"*\", object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = new DataTable();");
            stringBuilder1.AppendLine("\t\t\tstring txtCols = sqlCols;");
            stringBuilder1.AppendLine("\t\t\tif (string.IsNullOrEmpty(sqlCols))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\ttxtCols = \"*\";");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tsql.AppendLine(\"SELECT * FROM \");");
            stringBuilder1.AppendLine("\t\t\tsql.AppendLine(\"(\");");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\"SELECT ROW_NUMBER() OVER(PARTITION BY \").Append(sqlPartitionBy).Append(\" ORDER BY \").Append(sqlPartitionSort).Append(\") AS RN,\").Append(txtCols).AppendLine(\" FROM " + this._tableName + " \");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlPartitionWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" WHERE \").AppendLine(sqlPartitionWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.AppendLine(\") AS TempTAB\");");
            stringBuilder1.AppendLine("\t\t\tif (sqlPartitionRange == null || sqlPartitionRange.Count <= 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsqlPartitionRange = new List<int>(){ 1 };");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\"WHERE RN IN (\").Append(string.Join(\",\", sqlPartitionRange)).AppendLine(\")\");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" AND \").AppendLine(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlSort))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" ORDER BY \").AppendLine(sqlSort);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder1.AppendLine("\t\t\ttable = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecDataTable(cmd);");
            stringBuilder1.AppendLine("\t\t\tif (table == null)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\ttable = new DataTable();");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\ttable.TableName = \"table\";");
            stringBuilder1.AppendLine("\t\t\treturn table;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 查询：返回对象列表");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：返回对象列表");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and usertype=@usertype或distinct userid,username</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">需要查询的字段列表,如:ID,Name,CreateTime,默认*或空标识全部字段</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static List<T> GetList<T>(string sqlWhere = \"\", string sqlSort = \"\", string sqlCols = \"*\", object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetTable(sqlWhere, sqlSort, sqlCols, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\tList<T> rtnObjList = new List<T>();");
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add((T)System.Activator.CreateInstance(typeof(T), dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 查询：返回对象列表");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询：返回对象列表");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder4 = stringBuilder1;
            string[] strArray3 = new string[6];
            int index14 = 0;
            string str16 = "\t\tpublic static List<";
            strArray3[index14] = str16;
            int index15 = 1;
            string str17 = this._NamespaceClasses;
            strArray3[index15] = str17;
            int index16 = 2;
            string str18 = this._tableName;
            strArray3[index16] = str18;
            int index17 = 3;
            string str19 = "> GetList(string sqlWhere = \"\", string sqlSort = \"\", object[] ParamsList = null, bool ReadOnlyDataSource = ";
            strArray3[index17] = str19;
            int index18 = 4;
            string str20 = this.URFS;
            strArray3[index18] = str20;
            int index19 = 5;
            string str21 = ")";
            strArray3[index19] = str21;
            string str22 = string.Concat(strArray3);
            stringBuilder4.AppendLine(str22);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetTable(sqlWhere, sqlSort, \"*\", ParamsList, ReadOnlyDataSource);");
            StringBuilder stringBuilder5 = stringBuilder1;
            string[] strArray4 = new string[7];
            int index20 = 0;
            string str23 = "\t\t\tList<";
            strArray4[index20] = str23;
            int index21 = 1;
            string str24 = this._NamespaceClasses;
            strArray4[index21] = str24;
            int index22 = 2;
            string str25 = this._tableName;
            strArray4[index22] = str25;
            int index23 = 3;
            string str26 = "> rtnObjList = new List<";
            strArray4[index23] = str26;
            int index24 = 4;
            string str27 = this._NamespaceClasses;
            strArray4[index24] = str27;
            int index25 = 5;
            string str28 = this._tableName;
            strArray4[index25] = str28;
            int index26 = 6;
            string str29 = ">();";
            strArray4[index26] = str29;
            string str30 = string.Concat(strArray4);
            stringBuilder5.AppendLine(str30);
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add(new " + this._NamespaceClasses + this._tableName + "(dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 分页查询");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 分页查询");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序条件,如username desc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">数据库字段名组,用逗号分割,例如:username,userpwd,userid</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageIndex\">页码</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageSize\">页大小</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"recordCount\">记录行数</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder6 = stringBuilder1;
            string[] strArray5 = new string[6];
            int index27 = 0;
            string str31 = "\t\tpublic static List<";
            strArray5[index27] = str31;
            int index28 = 1;
            string str32 = this._NamespaceClasses;
            strArray5[index28] = str32;
            int index29 = 2;
            string str33 = this._tableName;
            strArray5[index29] = str33;
            int index30 = 3;
            string str34 = "> GetList(string sqlWhere, string sqlSort, string sqlCols, int pageIndex, int pageSize, out int recordCount, object[] ParamsList = null, bool ReadOnlyDataSource = ";
            strArray5[index30] = str34;
            int index31 = 4;
            string str35 = this.URFS;
            strArray5[index31] = str35;
            int index32 = 5;
            string str36 = ")";
            strArray5[index32] = str36;
            string str37 = string.Concat(strArray5);
            stringBuilder6.AppendLine(str37);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tlong LRecordCount = 0;");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetTable(sqlWhere, sqlSort, sqlCols, pageIndex, pageSize, out LRecordCount, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\trecordCount = Convert.ToInt32(LRecordCount);");
            StringBuilder stringBuilder7 = stringBuilder1;
            string[] strArray6 = new string[7];
            int index33 = 0;
            string str38 = "\t\t\tList<";
            strArray6[index33] = str38;
            int index34 = 1;
            string str39 = this._NamespaceClasses;
            strArray6[index34] = str39;
            int index35 = 2;
            string str40 = this._tableName;
            strArray6[index35] = str40;
            int index36 = 3;
            string str41 = "> rtnObjList = new List<";
            strArray6[index36] = str41;
            int index37 = 4;
            string str42 = this._NamespaceClasses;
            strArray6[index37] = str42;
            int index38 = 5;
            string str43 = this._tableName;
            strArray6[index38] = str43;
            int index39 = 6;
            string str44 = ">();";
            strArray6[index39] = str44;
            string str45 = string.Concat(strArray6);
            stringBuilder7.AppendLine(str45);
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add(new " + this._NamespaceClasses + this._tableName + "(dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 分页查询");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 分页查询");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序条件,如username desc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">数据库字段名组,用逗号分割,例如:username,userpwd,userid</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageIndex\">页码</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageSize\">页大小</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"recordCount\">记录行数</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder8 = stringBuilder1;
            string[] strArray7 = new string[6];
            int index40 = 0;
            string str46 = "\t\tpublic static List<";
            strArray7[index40] = str46;
            int index41 = 1;
            string str47 = this._NamespaceClasses;
            strArray7[index41] = str47;
            int index42 = 2;
            string str48 = this._tableName;
            strArray7[index42] = str48;
            int index43 = 3;
            string str49 = "> GetList(string sqlWhere, string sqlSort, string sqlCols, int pageIndex, int pageSize, out long recordCount, object[] ParamsList = null, bool ReadOnlyDataSource = ";
            strArray7[index43] = str49;
            int index44 = 4;
            string str50 = this.URFS;
            strArray7[index44] = str50;
            int index45 = 5;
            string str51 = ")";
            strArray7[index45] = str51;
            string str52 = string.Concat(strArray7);
            stringBuilder8.AppendLine(str52);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tlong LRecordCount = 0;");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetTable(sqlWhere, sqlSort, sqlCols, pageIndex, pageSize, out LRecordCount, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\trecordCount = Convert.ToInt64(LRecordCount);");
            StringBuilder stringBuilder9 = stringBuilder1;
            string[] strArray8 = new string[7];
            int index46 = 0;
            string str53 = "\t\t\tList<";
            strArray8[index46] = str53;
            int index47 = 1;
            string str54 = this._NamespaceClasses;
            strArray8[index47] = str54;
            int index48 = 2;
            string str55 = this._tableName;
            strArray8[index48] = str55;
            int index49 = 3;
            string str56 = "> rtnObjList = new List<";
            strArray8[index49] = str56;
            int index50 = 4;
            string str57 = this._NamespaceClasses;
            strArray8[index50] = str57;
            int index51 = 5;
            string str58 = this._tableName;
            strArray8[index51] = str58;
            int index52 = 6;
            string str59 = ">();";
            strArray8[index52] = str59;
            string str60 = string.Concat(strArray8);
            stringBuilder9.AppendLine(str60);
            stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\trtnObjList.Add(new " + this._NamespaceClasses + this._tableName + "(dr));");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn rtnObjList;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            DataRow[] dataRowArray = this.DT.Select("Key='PRI'");
            DBS_TypeMap dbsTypeMap = new DBS_TypeMap();
            if (dataRowArray != null && (uint)dataRowArray.Length > 0U)
            {
                for (int index53 = 0; index53 < dataRowArray.Length; ++index53)
                {
                    DataRow dataRow = dataRowArray[index53];
                    stringBuilder1.AppendLine("\t\t#region 根据主键:" + dataRow["Field"].ToString() + " 查询");
                    stringBuilder1.AppendLine("\t\t/// <summary>");
                    stringBuilder1.AppendLine("\t\t/// 根据主键:" + dataRow["Field"].ToString() + " 查询");
                    stringBuilder1.AppendLine("\t\t/// </summary>");
                    StringBuilder stringBuilder10 = stringBuilder1;
                    string[] strArray9 = new string[5];
                    int index54 = 0;
                    string str61 = "\t\t/// <param name=\"";
                    strArray9[index54] = str61;
                    int index55 = 1;
                    string str62 = dataRow["Field"].ToString();
                    strArray9[index55] = str62;
                    int index56 = 2;
                    string str63 = "\">";
                    strArray9[index56] = str63;
                    int index57 = 3;
                    string str64 = dataRow["Comment"].ToString();
                    strArray9[index57] = str64;
                    int index58 = 4;
                    string str65 = "</param>";
                    strArray9[index58] = str65;
                    string str66 = string.Concat(strArray9);
                    stringBuilder10.AppendLine(str66);
                    stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
                    stringBuilder1.AppendLine("\t\t/// <returns></returns>");
                    StringBuilder stringBuilder11 = stringBuilder1;
                    string[] strArray10 = new string[9];
                    int index59 = 0;
                    string str67 = "\t\tpublic static DataTable GetTableBy";
                    strArray10[index59] = str67;
                    int index60 = 1;
                    string str68 = dataRow["Field"].ToString();
                    strArray10[index60] = str68;
                    int index61 = 2;
                    string str69 = "(";
                    strArray10[index61] = str69;
                    int index62 = 3;
                    string codeType = dbsTypeMap[dataRow["Type"].ToString()].CodeType;
                    strArray10[index62] = codeType;
                    int index63 = 4;
                    string str70 = " _";
                    strArray10[index63] = str70;
                    int index64 = 5;
                    string str71 = dataRow["Field"].ToString();
                    strArray10[index64] = str71;
                    int index65 = 6;
                    string str72 = ", bool ReadOnlyDataSource = ";
                    strArray10[index65] = str72;
                    int index66 = 7;
                    string str73 = this.URFS;
                    strArray10[index66] = str73;
                    int index67 = 8;
                    string str74 = ")";
                    strArray10[index67] = str74;
                    string str75 = string.Concat(strArray10);
                    stringBuilder11.AppendLine(str75);
                    stringBuilder1.AppendLine("\t\t{");
                    stringBuilder1.AppendLine("\t\t\tDataTable table = new DataTable();");
                    StringBuilder stringBuilder12 = stringBuilder1;
                    string[] strArray11 = new string[7];
                    int index68 = 0;
                    string str76 = "\t\t\tstring sql = \"SELECT * FROM ";
                    strArray11[index68] = str76;
                    int index69 = 1;
                    string str77 = this._tableName;
                    strArray11[index69] = str77;
                    int index70 = 2;
                    string str78 = "  WHERE ";
                    strArray11[index70] = str78;
                    int index71 = 3;
                    string str79 = dataRow["Field"].ToString();
                    strArray11[index71] = str79;
                    int index72 = 4;
                    string str80 = "=@";
                    strArray11[index72] = str80;
                    int index73 = 5;
                    string str81 = dataRow["Field"].ToString();
                    strArray11[index73] = str81;
                    int index74 = 6;
                    string str82 = "\";";
                    strArray11[index74] = str82;
                    string str83 = string.Concat(strArray11);
                    stringBuilder12.AppendLine(str83);
                    stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
                    stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql;");
                    StringBuilder stringBuilder13 = stringBuilder1;
                    string[] strArray12 = new string[7];
                    int index75 = 0;
                    string str84 = "\t\t\tcmd.Parameters.Add(\"@";
                    strArray12[index75] = str84;
                    int index76 = 1;
                    string str85 = dataRow["Field"].ToString();
                    strArray12[index76] = str85;
                    int index77 = 2;
                    string str86 = "\", ";
                    strArray12[index77] = str86;
                    int index78 = 3;
                    string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                    strArray12[index78] = sqlCommandType;
                    int index79 = 4;
                    string str87 = ").Value = _";
                    strArray12[index79] = str87;
                    int index80 = 5;
                    string str88 = dataRow["Field"].ToString();
                    strArray12[index80] = str88;
                    int index81 = 6;
                    string str89 = ";";
                    strArray12[index81] = str89;
                    string str90 = string.Concat(strArray12);
                    stringBuilder13.AppendLine(str90);
                    stringBuilder1.AppendLine("\t\t\ttable = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecDataTable(cmd);");
                    stringBuilder1.AppendLine("\t\t\tif (table == null)");
                    stringBuilder1.AppendLine("\t\t\t{");
                    stringBuilder1.AppendLine("\t\t\t\ttable = new DataTable();");
                    stringBuilder1.AppendLine("\t\t\t}");
                    stringBuilder1.AppendLine("\t\t\ttable.TableName = \"table\";");
                    stringBuilder1.AppendLine("\t\t\treturn table;");
                    stringBuilder1.AppendLine("\t\t}");
                    stringBuilder1.AppendLine("\t\t#endregion");
                    stringBuilder1.AppendLine("");
                }
            }
            if (dataRowArray != null && (uint)dataRowArray.Length > 0U)
            {
                for (int index53 = 0; index53 < dataRowArray.Length; ++index53)
                {
                    DataRow dataRow = dataRowArray[index53];
                    stringBuilder1.AppendLine("\t\t#region 根据主键:" + dataRow["Field"].ToString() + " 查询，返回对象列表");
                    stringBuilder1.AppendLine("\t\t/// <summary>");
                    stringBuilder1.AppendLine("\t\t/// 根据主键:" + dataRow["Field"].ToString() + " 查询，返回对象列表");
                    stringBuilder1.AppendLine("\t\t/// </summary>");
                    StringBuilder stringBuilder10 = stringBuilder1;
                    string[] strArray9 = new string[5];
                    int index54 = 0;
                    string str61 = "\t\t/// <param name=\"";
                    strArray9[index54] = str61;
                    int index55 = 1;
                    string str62 = dataRow["Field"].ToString();
                    strArray9[index55] = str62;
                    int index56 = 2;
                    string str63 = "\">";
                    strArray9[index56] = str63;
                    int index57 = 3;
                    string str64 = dataRow["Comment"].ToString();
                    strArray9[index57] = str64;
                    int index58 = 4;
                    string str65 = "</param>";
                    strArray9[index58] = str65;
                    string str66 = string.Concat(strArray9);
                    stringBuilder10.AppendLine(str66);
                    stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
                    stringBuilder1.AppendLine("\t\t/// <returns></returns>");
                    StringBuilder stringBuilder11 = stringBuilder1;
                    string[] strArray10 = new string[12];
                    int index59 = 0;
                    string str67 = "\t\tpublic static List<";
                    strArray10[index59] = str67;
                    int index60 = 1;
                    string str68 = this._NamespaceClasses;
                    strArray10[index60] = str68;
                    int index61 = 2;
                    string str69 = this._tableName;
                    strArray10[index61] = str69;
                    int index62 = 3;
                    string str70 = "> GetListBy";
                    strArray10[index62] = str70;
                    int index63 = 4;
                    string str71 = dataRow["Field"].ToString();
                    strArray10[index63] = str71;
                    int index64 = 5;
                    string str72 = "(";
                    strArray10[index64] = str72;
                    int index65 = 6;
                    string codeType = dbsTypeMap[dataRow["Type"].ToString()].CodeType;
                    strArray10[index65] = codeType;
                    int index66 = 7;
                    string str73 = " _";
                    strArray10[index66] = str73;
                    int index67 = 8;
                    string str74 = dataRow["Field"].ToString();
                    strArray10[index67] = str74;
                    int index68 = 9;
                    string str75 = ", bool ReadOnlyDataSource = ";
                    strArray10[index68] = str75;
                    int index69 = 10;
                    string str76 = this.URFS;
                    strArray10[index69] = str76;
                    int index70 = 11;
                    string str77 = ")";
                    strArray10[index70] = str77;
                    string str78 = string.Concat(strArray10);
                    stringBuilder11.AppendLine(str78);
                    stringBuilder1.AppendLine("\t\t{");
                    StringBuilder stringBuilder12 = stringBuilder1;
                    string[] strArray11 = new string[5];
                    int index71 = 0;
                    string str79 = "\t\t\tDataTable table = GetTableBy";
                    strArray11[index71] = str79;
                    int index72 = 1;
                    string str80 = dataRow["Field"].ToString();
                    strArray11[index72] = str80;
                    int index73 = 2;
                    string str81 = "(_";
                    strArray11[index73] = str81;
                    int index74 = 3;
                    string str82 = dataRow["Field"].ToString();
                    strArray11[index74] = str82;
                    int index75 = 4;
                    string str83 = ", ReadOnlyDataSource);";
                    strArray11[index75] = str83;
                    string str84 = string.Concat(strArray11);
                    stringBuilder12.AppendLine(str84);
                    StringBuilder stringBuilder13 = stringBuilder1;
                    string[] strArray12 = new string[7];
                    int index76 = 0;
                    string str85 = "\t\t\tList<";
                    strArray12[index76] = str85;
                    int index77 = 1;
                    string str86 = this._NamespaceClasses;
                    strArray12[index77] = str86;
                    int index78 = 2;
                    string str87 = this._tableName;
                    strArray12[index78] = str87;
                    int index79 = 3;
                    string str88 = "> objList = new List<";
                    strArray12[index79] = str88;
                    int index80 = 4;
                    string str89 = this._NamespaceClasses;
                    strArray12[index80] = str89;
                    int index81 = 5;
                    string str90 = this._tableName;
                    strArray12[index81] = str90;
                    int index82 = 6;
                    string str91 = ">();";
                    strArray12[index82] = str91;
                    string str92 = string.Concat(strArray12);
                    stringBuilder13.AppendLine(str92);
                    stringBuilder1.AppendLine("\t\t\tif (table != null && table.Rows.Count > 0)");
                    stringBuilder1.AppendLine("\t\t\t{");
                    stringBuilder1.AppendLine("\t\t\t\tforeach (DataRow dr in table.Rows)");
                    stringBuilder1.AppendLine("\t\t\t\t{");
                    stringBuilder1.AppendLine("\t\t\t\t\tobjList.Add(new " + this._NamespaceClasses + this._tableName + "(dr));");
                    stringBuilder1.AppendLine("\t\t\t\t}");
                    stringBuilder1.AppendLine("\t\t\t}");
                    stringBuilder1.AppendLine("\t\t\treturn objList;");
                    stringBuilder1.AppendLine("\t\t}");
                    stringBuilder1.AppendLine("\t\t#endregion");
                    stringBuilder1.AppendLine("");
                }
            }
            stringBuilder1.AppendLine("\t\t#region 查询某字段数据第一行第一列数据");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 条件查询,查询某字段数据第一行第一列数据");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCol\">数据库字段名,也可以为COUNT(),TOP 1 列名</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123' and usertype=@usertype</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序，如 date desc,id asc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static object GetSingle(string sqlCol, string sqlWhere = \"\", string sqlSort = \"\", object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"SELECT \" + sqlCol + \" FROM " + this._tableName + " \");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlSort))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" ORDER BY \").Append(sqlSort);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\" LIMIT 1 \");");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder1.AppendLine("\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecScalar(cmd);");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 条件查询,查询记录总数");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询记录总数");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123',并可带排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static long CountOutLong(string sqlWhere, object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"SELECT COUNT(1) FROM " + this._tableName + "  WHERE 1=1\");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" AND \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder1.AppendLine("\t\t\tobject CountObj = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecScalar(cmd);");
            stringBuilder1.AppendLine("\t\t\tlong RtnCount = 0;");
            stringBuilder1.AppendLine("\t\t\tif (CountObj != null && CountObj != DBNull.Value && !string.IsNullOrEmpty(CountObj.ToString()))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tlong.TryParse(CountObj.ToString(), out RtnCount);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn RtnCount;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 条件查询,查询记录总数");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 条件查询,查询记录总数");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123',并可带排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static int Count(string sqlWhere, object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tlong rtnInt= CountOutLong(sqlWhere, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\treturn Convert.ToInt32(rtnInt);");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            string str93 = "";
            foreach (DataRow dataRow in (InternalDataCollectionBase)this.DT.Rows)
            {
                if (!(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                    str93 = !string.IsNullOrEmpty(str93) ? str93 + "," + dataRow["Field"].ToString() : dataRow["Field"].ToString();
            }
            stringBuilder1.AppendLine("\t\t#region 分页查询");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 分页查询");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序条件,如username desc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">数据库字段名组,用逗号分割,例如:username,userpwd,userid</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageIndex\">页码</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageSize\">页大小</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"recordCount\">记录行数</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static DataTable GetTable(string sqlWhere, string sqlSort, string sqlCols, int pageIndex, int pageSize, out int recordCount, object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tlong LRecordCount = 0;");
            stringBuilder1.AppendLine("\t\t\tDataTable table = GetTable(sqlWhere, sqlSort, sqlCols, pageIndex, pageSize, out LRecordCount, ParamsList, ReadOnlyDataSource);");
            stringBuilder1.AppendLine("\t\t\trecordCount = Convert.ToInt32(LRecordCount);");
            stringBuilder1.AppendLine("\t\t\treturn table;");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 分页查询");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 分页查询");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序条件,如username desc</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlCols\">数据库字段名组,用逗号分割,例如:username,userpwd,userid</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageIndex\">页码</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"pageSize\">页大小</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"recordCount\">记录行数</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static DataTable GetTable(string sqlWhere, string sqlSort, string sqlCols, int pageIndex, int pageSize, out long recordCount, object[] ParamsList = null, bool ReadOnlyDataSource = " + this.URFS + ")");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tint SI = (pageIndex -1) * pageSize;");
            stringBuilder1.AppendLine("\t\t\tint EI = pageSize;");
            stringBuilder1.AppendLine("\t\t\tDataSet ds = new DataSet();");
            stringBuilder1.AppendLine("\t\t\tif (string.IsNullOrEmpty(sqlCols) || sqlCols == \"*\")");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsqlCols = \"" + str93 + "\";");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"SELECT \").Append(sqlCols);");
            StringBuilder stringBuilder14 = stringBuilder1;
            string[] strArray13 = new string[5];
            int index83 = 0;
            string str94 = "\t\t\tsql.Append(\" FROM ";
            strArray13[index83] = str94;
            int index84 = 1;
            string str95 = this._tableName;
            strArray13[index84] = str95;
            int index85 = 2;
            string str96 = " WHERE ID IN(SELECT ID FROM ";
            strArray13[index85] = str96;
            int index86 = 3;
            string str97 = this._tableName;
            strArray13[index86] = str97;
            int index87 = 4;
            string str98 = " WHERE 1=1 \");";
            strArray13[index87] = str98;
            string str99 = string.Concat(strArray13);
            stringBuilder14.AppendLine(str99);
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" AND \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\") \");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlSort))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" ORDER BY \").Append(sqlSort);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\" LIMIT @SI,@EI\");");
            stringBuilder1.AppendLine("\t\t\tobject[] NewParamsList;");
            stringBuilder1.AppendLine("\t\t\tif (ParamsList != null)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList = new object[ParamsList.Length + 2];");
            stringBuilder1.AppendLine("\t\t\t\tfor (int i = 0;i < ParamsList.Length; i++)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\tNewParamsList[i] = ParamsList[i];");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList[ParamsList.Length] = SI;");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList[ParamsList.Length + 1] = EI;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList = new object[2];");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList[0] = SI;");
            stringBuilder1.AppendLine("\t\t\t\tNewParamsList[1] = EI;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\";SELECT COUNT(1) FROM " + this._tableName + "  WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\";SELECT COUNT(1) FROM " + this._tableName + " \");");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), NewParamsList);");
            stringBuilder1.AppendLine("\t\t\tds = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecDataSet(cmd);");
            stringBuilder1.AppendLine("\t\t\tif (ds != null && ds.Tables.Count > 1 && ds.Tables[1].Rows.Count >0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\trecordCount = Convert.ToInt64(ds.Tables[1].Rows[0][0]);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\trecordCount = 0;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (ds != null && ds.Tables.Count >1)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn ds.Tables[0];");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn new DataTable();");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t#region 查询并构建对象,返回第一个对象");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 查询并构建对象,返回第一个对象");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSort\">排序条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ParamsList\">参数值列表，需与sqlWhere中顺序对应，相同参数只提供一次，如 {\"123\",1}</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"ReadOnlyDataSource\">是否使用只读数据源</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder15 = stringBuilder1;
            string[] strArray14 = new string[6];
            int index88 = 0;
            string str100 = "\t\tpublic static ";
            strArray14[index88] = str100;
            int index89 = 1;
            string str101 = this._NamespaceClasses;
            strArray14[index89] = str101;
            int index90 = 2;
            string str102 = this._tableName;
            strArray14[index90] = str102;
            int index91 = 3;
            string str103 = " Get(string sqlWhere, string sqlSort = \"\", object[] ParamsList = null, bool ReadOnlyDataSource = ";
            strArray14[index91] = str103;
            int index92 = 4;
            string str104 = this.URFS;
            strArray14[index92] = str104;
            int index93 = 5;
            string str105 = ")";
            strArray14[index93] = str105;
            string str106 = string.Concat(strArray14);
            stringBuilder15.AppendLine(str106);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"SELECT * FROM " + this._tableName + " \");");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlWhere))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sqlSort))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql.Append(\" ORDER BY \").Append(sqlSort);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\" LIMIT 1 \");");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder1.AppendLine("\t\t\tDataTable DT = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, ReadOnlyDataSource).ExecDataTable(cmd);");
            stringBuilder1.AppendLine("\t\t\tif(DT != null && DT.Rows.Count > 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn new " + this._NamespaceClasses + this._tableName + "(DT.Rows[0]);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn new " + this._NamespaceClasses + this._tableName + "();");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            stringBuilder1.AppendLine("\t\t#endregion");
            return ((object)stringBuilder1).ToString();
        }
        #endregion

        #region 删除语句
        /// <summary>
        /// 删除语句
        /// </summary>
        /// <returns></returns>
        private string GetDeleteContent()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\t\t#region 删除");
            stringBuilder.AppendLine("\t\t/// <summary>");
            stringBuilder.AppendLine("\t\t/// 删除数据，数据删除，Delete");
            stringBuilder.AppendLine("\t\t/// </summary>");
            stringBuilder.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder.AppendLine("\t\t/// <returns></returns>");
            stringBuilder.AppendLine("\t\tpublic static int DBDelete(string sqlWhere, object[] ParamsList = null, bool IsRowLock = true)");
            stringBuilder.AppendLine("\t\t{");
            stringBuilder.AppendLine("\t\t\tstring deleteSql = string.Empty;");
            stringBuilder.AppendLine("\t\t\tif (IsRowLock)");
            stringBuilder.AppendLine("\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\tdeleteSql = \"DELETE FROM " + this._tableName + " WHERE \";");
            stringBuilder.AppendLine("\t\t\t}");
            stringBuilder.AppendLine("\t\t\telse");
            stringBuilder.AppendLine("\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\tdeleteSql = \"DELETE FROM " + this._tableName + " WHERE \";");
            stringBuilder.AppendLine("\t\t\t}");
            stringBuilder.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(deleteSql);");
            stringBuilder.AppendLine("\t\t\tsql.Append(sqlWhere);");
            stringBuilder.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder.AppendLine("\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder.AppendLine("\t\t}");
            stringBuilder.AppendLine("");
            stringBuilder.AppendLine("\t\t/// <summary>");
            stringBuilder.AppendLine("\t\t/// 删除数据，逻辑删除，IsDel=1");
            stringBuilder.AppendLine("\t\t/// </summary>");
            stringBuilder.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder.AppendLine("\t\t/// <returns></returns>");
            stringBuilder.AppendLine("\t\tpublic static int Delete(string sqlWhere, object[] ParamsList = null)");
            stringBuilder.AppendLine("\t\t{");
            stringBuilder.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"UPDATE " + this._tableName + " SET IsDel=1 WHERE \");");
            stringBuilder.AppendLine("\t\t\tsql.Append(sqlWhere);");
            stringBuilder.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), ParamsList);");
            stringBuilder.AppendLine("\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder.AppendLine("\t\t}");
            stringBuilder.AppendLine("\t\t#endregion");
            return ((object)stringBuilder).ToString();
        }

        #endregion

        #region 更新语句
        /// <summary>
        /// 更新语句
        /// </summary>
        /// <returns></returns>
        private string GetUpdateContent()
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine("\t\t#region 更新");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 更新数据");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">查询条件，如username='123' and password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlSet\">数据设置，如username='123',password='123'</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static int Update(string sqlWhere, string sqlSet, object[] ParamsList = null)");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"UPDATE " + this._tableName + " SET \");");
            stringBuilder1.AppendLine("\t\t\tsql.Append(sqlSet).Append(\" WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sqlWhere + \" \" + sqlSet, ParamsList);");
            stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql.ToString();");
            stringBuilder1.AppendLine("\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 更新数据，更新指定XML列");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"sqlWhere\">条件</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"whereParamsList\">条件参数</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"xmlCol\">XML类型列</param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"XmlContent\">XML内容</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            stringBuilder1.AppendLine("\t\tpublic static int UpdateXml(string sqlWhere, object[] whereParamsList, string xmlCol, string XmlContent)");
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sql = new StringBuilder(\"UPDATE Product_Info SET {0} \");");
            stringBuilder1.AppendLine("\t\t\tsql.Append(\" WHERE \").Append(sqlWhere);");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = BuildCommand(sql.ToString(), whereParamsList);");
            stringBuilder1.AppendLine("\t\t\tif (xmlCol.Contains(\"[\"))");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tcmd.CommandText = string.Format(sql.ToString(), xmlCol + \"=@\" + xmlCol);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tcmd.CommandText = string.Format(sql.ToString(), \"[\" + xmlCol + \"]=@\" + xmlCol);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tcmd.Parameters.Add(\"@\" + xmlCol, SqlDbType.Xml).Value = new SqlXml(new XmlTextReader(XmlContent, XmlNodeType.Document, null));");
            stringBuilder1.AppendLine("\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 更新数据");
            stringBuilder1.AppendLine("\t\t/// 返回：操作影响记录数，-1表示没有需要更新的列");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"" + this._tableName + "_obj\"></param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder2 = stringBuilder1;
            string[] strArray1 = new string[6];
            int index1 = 0;
            string str1 = "\t\tpublic static int Update(";
            strArray1[index1] = str1;
            int index2 = 1;
            string str2 = this._NamespaceClasses;
            strArray1[index2] = str2;
            int index3 = 2;
            string str3 = this._tableName;
            strArray1[index3] = str3;
            int index4 = 3;
            string str4 = " ";
            strArray1[index4] = str4;
            int index5 = 4;
            string str5 = this._tableName;
            strArray1[index5] = str5;
            int index6 = 5;
            string str6 = "_obj)";
            strArray1[index6] = str6;
            string str7 = string.Concat(strArray1);
            stringBuilder2.AppendLine(str7);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tif(" + this._tableName + "_obj.ModifiedColumns.Count <= 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn -1;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sqlSet = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sqlWhere = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tstring sql = \"UPDATE " + this._tableName + " SET {0} WHERE {1}\";");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
            DataRow[] dataRowArray1 = this.DT.Select("Key='PRI'");
            DBS_TypeMap dbsTypeMap = new DBS_TypeMap();
            foreach (DataRow dataRow in dataRowArray1)
            {
                if (!(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                {
                    StringBuilder stringBuilder3 = stringBuilder1;
                    string[] strArray2 = new string[7];
                    int index7 = 0;
                    string str8 = "\t\t\tcmd.Parameters.AddWithValue(\"@";
                    strArray2[index7] = str8;
                    int index8 = 1;
                    string str9 = dataRow["Field"].ToString();
                    strArray2[index8] = str9;
                    int index9 = 2;
                    string str10 = "\", ";
                    strArray2[index9] = str10;
                    int index10 = 3;
                    string str11 = this._tableName;
                    strArray2[index10] = str11;
                    int index11 = 4;
                    string str12 = "_obj.";
                    strArray2[index11] = str12;
                    int index12 = 5;
                    string str13 = dataRow["Field"].ToString();
                    strArray2[index12] = str13;
                    int index13 = 6;
                    string str14 = ");";
                    strArray2[index13] = str14;
                    string str15 = string.Concat(strArray2);
                    stringBuilder3.AppendLine(str15);
                    StringBuilder stringBuilder4 = stringBuilder1;
                    string[] strArray3 = new string[5];
                    int index14 = 0;
                    string str16 = "\t\t\tcmd.Parameters[\"@";
                    strArray3[index14] = str16;
                    int index15 = 1;
                    string str17 = dataRow["Field"].ToString();
                    strArray3[index15] = str17;
                    int index16 = 2;
                    string str18 = "\"].MySqlDbType = ";
                    strArray3[index16] = str18;
                    int index17 = 3;
                    string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                    strArray3[index17] = sqlCommandType;
                    int index18 = 4;
                    string str19 = ";";
                    strArray3[index18] = str19;
                    string str20 = string.Concat(strArray3);
                    stringBuilder4.AppendLine(str20);
                    stringBuilder1.AppendLine("\t\t\tif (sqlWhere.Length > 0)");
                    stringBuilder1.AppendLine("\t\t\t{");
                    stringBuilder1.AppendLine("\t\t\t\tsqlWhere.Append(\" AND \");");
                    stringBuilder1.AppendLine("\t\t\t}");
                    StringBuilder stringBuilder5 = stringBuilder1;
                    string[] strArray4 = new string[5];
                    int index19 = 0;
                    string str21 = "\t\t\tsqlWhere.Append(\"";
                    strArray4[index19] = str21;
                    int index20 = 1;
                    string str22 = dataRow["Field"].ToString();
                    strArray4[index20] = str22;
                    int index21 = 2;
                    string str23 = "=@";
                    strArray4[index21] = str23;
                    int index22 = 3;
                    string str24 = dataRow["Field"].ToString();
                    strArray4[index22] = str24;
                    int index23 = 4;
                    string str25 = "\");";
                    strArray4[index23] = str25;
                    string str26 = string.Concat(strArray4);
                    stringBuilder5.AppendLine(str26);
                }
            }
            DataRow[] dataRowArray2 = this.DT.Select("Key<>'PRI'");
            foreach (DataRow dataRow in dataRowArray2)
            {
                if (!(dataRow["Extra"].ToString() == "auto_increment") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                {
                    if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "DateTime")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[13];
                        int index7 = 0;
                        string str8 = "\t\t\tif (";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = " != null && ";
                        strArray2[index11] = str12;
                        int index12 = 5;
                        string str13 = this._tableName;
                        strArray2[index12] = str13;
                        int index13 = 6;
                        string str14 = "_obj.";
                        strArray2[index13] = str14;
                        int index14 = 7;
                        string str15 = dataRow["Field"].ToString();
                        strArray2[index14] = str15;
                        int index15 = 8;
                        string str16 = " > DateTime.MinValue && ";
                        strArray2[index15] = str16;
                        int index16 = 9;
                        string str17 = this._tableName;
                        strArray2[index16] = str17;
                        int index17 = 10;
                        string str18 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index17] = str18;
                        int index18 = 11;
                        string str19 = dataRow["Field"].ToString();
                        strArray2[index18] = str19;
                        int index19 = 12;
                        string str20 = "]\"))";
                        strArray2[index19] = str20;
                        string str21 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str21);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index20 = 0;
                        string str22 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index20] = str22;
                        int index21 = 1;
                        string str23 = dataRow["Field"].ToString();
                        strArray3[index21] = str23;
                        int index22 = 2;
                        string str24 = "=@";
                        strArray3[index22] = str24;
                        int index23 = 3;
                        string str25 = dataRow["Field"].ToString();
                        strArray3[index23] = str25;
                        int index24 = 4;
                        string str26 = "\");";
                        strArray3[index24] = str26;
                        string str27 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str27);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index25 = 0;
                        string str28 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index25] = str28;
                        int index26 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray4[index26] = str29;
                        int index27 = 2;
                        string str30 = "\", ";
                        strArray4[index27] = str30;
                        int index28 = 3;
                        string str31 = this._tableName;
                        strArray4[index28] = str31;
                        int index29 = 4;
                        string str32 = "_obj.";
                        strArray4[index29] = str32;
                        int index30 = 5;
                        string str33 = dataRow["Field"].ToString();
                        strArray4[index30] = str33;
                        int index31 = 6;
                        string str34 = ");";
                        strArray4[index31] = str34;
                        string str35 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str35);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index32 = 0;
                        string str36 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index32] = str36;
                        int index33 = 1;
                        string str37 = dataRow["Field"].ToString();
                        strArray5[index33] = str37;
                        int index34 = 2;
                        string str38 = "\"].MySqlDbType = ";
                        strArray5[index34] = str38;
                        int index35 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index35] = sqlCommandType;
                        int index36 = 4;
                        string str39 = ";";
                        strArray5[index36] = str39;
                        string str40 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str40);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].DBType.ToUpper() == "XML")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[9];
                        int index7 = 0;
                        string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = ") && ";
                        strArray2[index11] = str12;
                        int index12 = 5;
                        string str13 = this._tableName;
                        strArray2[index12] = str13;
                        int index13 = 6;
                        string str14 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index13] = str14;
                        int index14 = 7;
                        string str15 = dataRow["Field"].ToString();
                        strArray2[index14] = str15;
                        int index15 = 8;
                        string str16 = "]\"))";
                        strArray2[index15] = str16;
                        string str17 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str17);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index16 = 0;
                        string str18 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index16] = str18;
                        int index17 = 1;
                        string str19 = dataRow["Field"].ToString();
                        strArray3[index17] = str19;
                        int index18 = 2;
                        string str20 = "=@";
                        strArray3[index18] = str20;
                        int index19 = 3;
                        string str21 = dataRow["Field"].ToString();
                        strArray3[index19] = str21;
                        int index20 = 4;
                        string str22 = "\");";
                        strArray3[index20] = str22;
                        string str23 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str23);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index21 = 0;
                        string str24 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index21] = str24;
                        int index22 = 1;
                        string str25 = dataRow["Field"].ToString();
                        strArray4[index22] = str25;
                        int index23 = 2;
                        string str26 = "\", new SqlXml(new XmlTextReader(";
                        strArray4[index23] = str26;
                        int index24 = 3;
                        string str27 = this._tableName;
                        strArray4[index24] = str27;
                        int index25 = 4;
                        string str28 = "_obj.";
                        strArray4[index25] = str28;
                        int index26 = 5;
                        string str29 = dataRow["Field"].ToString();
                        strArray4[index26] = str29;
                        int index27 = 6;
                        string str30 = ", XmlNodeType.Document, null)));";
                        strArray4[index27] = str30;
                        string str31 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str31);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index28 = 0;
                        string str32 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index28] = str32;
                        int index29 = 1;
                        string str33 = dataRow["Field"].ToString();
                        strArray5[index29] = str33;
                        int index30 = 2;
                        string str34 = "\"].MySqlDbType = ";
                        strArray5[index30] = str34;
                        int index31 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index31] = sqlCommandType;
                        int index32 = 4;
                        string str35 = ";";
                        strArray5[index32] = str35;
                        string str36 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str36);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "string")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[5];
                        int index7 = 0;
                        string str8 = "\t\t\tif(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = "]\"))";
                        strArray2[index11] = str12;
                        string str13 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str13);
                        stringBuilder1.AppendLine("\t\t\t{");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index12 = 0;
                        string str14 = "\t\t\t\tif (string.IsNullOrEmpty(";
                        strArray3[index12] = str14;
                        int index13 = 1;
                        string str15 = this._tableName;
                        strArray3[index13] = str15;
                        int index14 = 2;
                        string str16 = "_obj.";
                        strArray3[index14] = str16;
                        int index15 = 3;
                        string str17 = dataRow["Field"].ToString();
                        strArray3[index15] = str17;
                        int index16 = 4;
                        string str18 = "))";
                        strArray3[index16] = str18;
                        string str19 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str19);
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        if (string.IsNullOrEmpty(dataRow["Default"].ToString()))
                        {
                            StringBuilder stringBuilder5 = stringBuilder1;
                            string[] strArray4 = new string[5];
                            int index17 = 0;
                            string str20 = "\t\t\t\t\t";
                            strArray4[index17] = str20;
                            int index18 = 1;
                            string str21 = this._tableName;
                            strArray4[index18] = str21;
                            int index19 = 2;
                            string str22 = "_obj.";
                            strArray4[index19] = str22;
                            int index20 = 3;
                            string str23 = dataRow["Field"].ToString();
                            strArray4[index20] = str23;
                            int index21 = 4;
                            string str24 = " = \"\";";
                            strArray4[index21] = str24;
                            string str25 = string.Concat(strArray4);
                            stringBuilder5.AppendLine(str25);
                        }
                        else
                        {
                            StringBuilder stringBuilder5 = stringBuilder1;
                            string[] strArray4 = new string[7];
                            int index17 = 0;
                            string str20 = "\t\t\t\t\t";
                            strArray4[index17] = str20;
                            int index18 = 1;
                            string str21 = this._tableName;
                            strArray4[index18] = str21;
                            int index19 = 2;
                            string str22 = "_obj.";
                            strArray4[index19] = str22;
                            int index20 = 3;
                            string str23 = dataRow["Field"].ToString();
                            strArray4[index20] = str23;
                            int index21 = 4;
                            string str24 = " = \"";
                            strArray4[index21] = str24;
                            int index22 = 5;
                            string str25 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                            strArray4[index22] = str25;
                            int index23 = 6;
                            string str26 = "\";";
                            strArray4[index23] = str26;
                            string str27 = string.Concat(strArray4);
                            stringBuilder5.AppendLine(str27);
                        }
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index24 = 0;
                        string str28 = "\t\t\t\tsqlSet.Append(\"";
                        strArray5[index24] = str28;
                        int index25 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray5[index25] = str29;
                        int index26 = 2;
                        string str30 = "=@";
                        strArray5[index26] = str30;
                        int index27 = 3;
                        string str31 = dataRow["Field"].ToString();
                        strArray5[index27] = str31;
                        int index28 = 4;
                        string str32 = "\");";
                        strArray5[index28] = str32;
                        string str33 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str33);
                        StringBuilder stringBuilder7 = stringBuilder1;
                        string[] strArray6 = new string[7];
                        int index29 = 0;
                        string str34 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray6[index29] = str34;
                        int index30 = 1;
                        string str35 = dataRow["Field"].ToString();
                        strArray6[index30] = str35;
                        int index31 = 2;
                        string str36 = "\", ";
                        strArray6[index31] = str36;
                        int index32 = 3;
                        string str37 = this._tableName;
                        strArray6[index32] = str37;
                        int index33 = 4;
                        string str38 = "_obj.";
                        strArray6[index33] = str38;
                        int index34 = 5;
                        string str39 = dataRow["Field"].ToString();
                        strArray6[index34] = str39;
                        int index35 = 6;
                        string str40 = ");";
                        strArray6[index35] = str40;
                        string str41 = string.Concat(strArray6);
                        stringBuilder7.AppendLine(str41);
                        StringBuilder stringBuilder8 = stringBuilder1;
                        string[] strArray7 = new string[5];
                        int index36 = 0;
                        string str42 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray7[index36] = str42;
                        int index37 = 1;
                        string str43 = dataRow["Field"].ToString();
                        strArray7[index37] = str43;
                        int index38 = 2;
                        string str44 = "\"].MySqlDbType = ";
                        strArray7[index38] = str44;
                        int index39 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray7[index39] = sqlCommandType;
                        int index40 = 4;
                        string str45 = ";";
                        strArray7[index40] = str45;
                        string str46 = string.Concat(strArray7);
                        stringBuilder8.AppendLine(str46);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[5];
                        int index7 = 0;
                        string str8 = "\t\t\tif(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = "]\"))";
                        strArray2[index11] = str12;
                        string str13 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str13);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index12 = 0;
                        string str14 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index12] = str14;
                        int index13 = 1;
                        string str15 = dataRow["Field"].ToString();
                        strArray3[index13] = str15;
                        int index14 = 2;
                        string str16 = "=@";
                        strArray3[index14] = str16;
                        int index15 = 3;
                        string str17 = dataRow["Field"].ToString();
                        strArray3[index15] = str17;
                        int index16 = 4;
                        string str18 = "\");";
                        strArray3[index16] = str18;
                        string str19 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str19);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index17 = 0;
                        string str20 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index17] = str20;
                        int index18 = 1;
                        string str21 = dataRow["Field"].ToString();
                        strArray4[index18] = str21;
                        int index19 = 2;
                        string str22 = "\", ";
                        strArray4[index19] = str22;
                        int index20 = 3;
                        string str23 = this._tableName;
                        strArray4[index20] = str23;
                        int index21 = 4;
                        string str24 = "_obj.";
                        strArray4[index21] = str24;
                        int index22 = 5;
                        string str25 = dataRow["Field"].ToString();
                        strArray4[index22] = str25;
                        int index23 = 6;
                        string str26 = ");";
                        strArray4[index23] = str26;
                        string str27 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str27);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index24 = 0;
                        string str28 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index24] = str28;
                        int index25 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray5[index25] = str29;
                        int index26 = 2;
                        string str30 = "\"].MySqlDbType = ";
                        strArray5[index26] = str30;
                        int index27 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index27] = sqlCommandType;
                        int index28 = 4;
                        string str31 = ";";
                        strArray5[index28] = str31;
                        string str32 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str32);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                }
            }
            stringBuilder1.AppendLine("\t\t\tsql = string.Format(sql, sqlSet.ToString(), sqlWhere.ToString());");
            stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql;");
            stringBuilder1.AppendLine("\t\t\ttry");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tcatch(Exception e)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tif(XORM.Db.LogConfig.ThrowException)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\tthrow e;");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t\treturn -1;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 更新数据，行级数据锁定");
            stringBuilder1.AppendLine("\t\t/// 返回：操作影响记录数，-1表示没有需要更新的列");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"" + this._tableName + "_obj\"></param>");
            stringBuilder1.AppendLine("\t\t/// <param name=\"IsRowLock\">是否锁行</param>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder9 = stringBuilder1;
            string[] strArray8 = new string[6];
            int index41 = 0;
            string str47 = "\t\tpublic static int Update(";
            strArray8[index41] = str47;
            int index42 = 1;
            string str48 = this._NamespaceClasses;
            strArray8[index42] = str48;
            int index43 = 2;
            string str49 = this._tableName;
            strArray8[index43] = str49;
            int index44 = 3;
            string str50 = " ";
            strArray8[index44] = str50;
            int index45 = 4;
            string str51 = this._tableName;
            strArray8[index45] = str51;
            int index46 = 5;
            string str52 = "_obj, bool IsRowLock)";
            strArray8[index46] = str52;
            string str53 = string.Concat(strArray8);
            stringBuilder9.AppendLine(str53);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tif(" + this._tableName + "_obj.ModifiedColumns.Count <= 0)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn -1;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sqlSet = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tStringBuilder sqlWhere = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tstring sql = string.Empty;");
            stringBuilder1.AppendLine("\t\t\tif (IsRowLock)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql = \"UPDATE " + this._tableName + " SET {0} WHERE {1}\";");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\telse");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tsql = \"UPDATE " + this._tableName + " SET {0} WHERE {1}\";");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
            this.DT.Select("Key='PRI'");
            foreach (DataRow dataRow in dataRowArray1)
            {
                if (!(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                {
                    StringBuilder stringBuilder3 = stringBuilder1;
                    string[] strArray2 = new string[7];
                    int index7 = 0;
                    string str8 = "\t\t\tcmd.Parameters.AddWithValue(\"@";
                    strArray2[index7] = str8;
                    int index8 = 1;
                    string str9 = dataRow["Field"].ToString();
                    strArray2[index8] = str9;
                    int index9 = 2;
                    string str10 = "\", ";
                    strArray2[index9] = str10;
                    int index10 = 3;
                    string str11 = this._tableName;
                    strArray2[index10] = str11;
                    int index11 = 4;
                    string str12 = "_obj.";
                    strArray2[index11] = str12;
                    int index12 = 5;
                    string str13 = dataRow["Field"].ToString();
                    strArray2[index12] = str13;
                    int index13 = 6;
                    string str14 = ");";
                    strArray2[index13] = str14;
                    string str15 = string.Concat(strArray2);
                    stringBuilder3.AppendLine(str15);
                    StringBuilder stringBuilder4 = stringBuilder1;
                    string[] strArray3 = new string[5];
                    int index14 = 0;
                    string str16 = "\t\t\tcmd.Parameters[\"@";
                    strArray3[index14] = str16;
                    int index15 = 1;
                    string str17 = dataRow["Field"].ToString();
                    strArray3[index15] = str17;
                    int index16 = 2;
                    string str18 = "\"].MySqlDbType = ";
                    strArray3[index16] = str18;
                    int index17 = 3;
                    string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                    strArray3[index17] = sqlCommandType;
                    int index18 = 4;
                    string str19 = ";";
                    strArray3[index18] = str19;
                    string str20 = string.Concat(strArray3);
                    stringBuilder4.AppendLine(str20);
                    stringBuilder1.AppendLine("\t\t\tif (sqlWhere.Length > 0)");
                    stringBuilder1.AppendLine("\t\t\t{");
                    stringBuilder1.AppendLine("\t\t\t\tsqlWhere.Append(\" AND \");");
                    stringBuilder1.AppendLine("\t\t\t}");
                    StringBuilder stringBuilder5 = stringBuilder1;
                    string[] strArray4 = new string[5];
                    int index19 = 0;
                    string str21 = "\t\t\tsqlWhere.Append(\"";
                    strArray4[index19] = str21;
                    int index20 = 1;
                    string str22 = dataRow["Field"].ToString();
                    strArray4[index20] = str22;
                    int index21 = 2;
                    string str23 = "=@";
                    strArray4[index21] = str23;
                    int index22 = 3;
                    string str24 = dataRow["Field"].ToString();
                    strArray4[index22] = str24;
                    int index23 = 4;
                    string str25 = "\");";
                    strArray4[index23] = str25;
                    string str26 = string.Concat(strArray4);
                    stringBuilder5.AppendLine(str26);
                }
            }
            this.DT.Select("Key<>'PRI'");
            foreach (DataRow dataRow in dataRowArray2)
            {
                if (!(dataRow["Extra"].ToString() == "auto_increment") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                {
                    if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "DateTime")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[13];
                        int index7 = 0;
                        string str8 = "\t\t\tif (";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = " != null && ";
                        strArray2[index11] = str12;
                        int index12 = 5;
                        string str13 = this._tableName;
                        strArray2[index12] = str13;
                        int index13 = 6;
                        string str14 = "_obj.";
                        strArray2[index13] = str14;
                        int index14 = 7;
                        string str15 = dataRow["Field"].ToString();
                        strArray2[index14] = str15;
                        int index15 = 8;
                        string str16 = " > DateTime.MinValue && ";
                        strArray2[index15] = str16;
                        int index16 = 9;
                        string str17 = this._tableName;
                        strArray2[index16] = str17;
                        int index17 = 10;
                        string str18 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index17] = str18;
                        int index18 = 11;
                        string str19 = dataRow["Field"].ToString();
                        strArray2[index18] = str19;
                        int index19 = 12;
                        string str20 = "]\"))";
                        strArray2[index19] = str20;
                        string str21 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str21);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index20 = 0;
                        string str22 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index20] = str22;
                        int index21 = 1;
                        string str23 = dataRow["Field"].ToString();
                        strArray3[index21] = str23;
                        int index22 = 2;
                        string str24 = "=@";
                        strArray3[index22] = str24;
                        int index23 = 3;
                        string str25 = dataRow["Field"].ToString();
                        strArray3[index23] = str25;
                        int index24 = 4;
                        string str26 = "\");";
                        strArray3[index24] = str26;
                        string str27 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str27);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index25 = 0;
                        string str28 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index25] = str28;
                        int index26 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray4[index26] = str29;
                        int index27 = 2;
                        string str30 = "\", ";
                        strArray4[index27] = str30;
                        int index28 = 3;
                        string str31 = this._tableName;
                        strArray4[index28] = str31;
                        int index29 = 4;
                        string str32 = "_obj.";
                        strArray4[index29] = str32;
                        int index30 = 5;
                        string str33 = dataRow["Field"].ToString();
                        strArray4[index30] = str33;
                        int index31 = 6;
                        string str34 = ");";
                        strArray4[index31] = str34;
                        string str35 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str35);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index32 = 0;
                        string str36 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index32] = str36;
                        int index33 = 1;
                        string str37 = dataRow["Field"].ToString();
                        strArray5[index33] = str37;
                        int index34 = 2;
                        string str38 = "\"].MySqlDbType = ";
                        strArray5[index34] = str38;
                        int index35 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index35] = sqlCommandType;
                        int index36 = 4;
                        string str39 = ";";
                        strArray5[index36] = str39;
                        string str40 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str40);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].DBType.ToUpper() == "XML")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[9];
                        int index7 = 0;
                        string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = ") && ";
                        strArray2[index11] = str12;
                        int index12 = 5;
                        string str13 = this._tableName;
                        strArray2[index12] = str13;
                        int index13 = 6;
                        string str14 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index13] = str14;
                        int index14 = 7;
                        string str15 = dataRow["Field"].ToString();
                        strArray2[index14] = str15;
                        int index15 = 8;
                        string str16 = "]\"))";
                        strArray2[index15] = str16;
                        string str17 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str17);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index16 = 0;
                        string str18 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index16] = str18;
                        int index17 = 1;
                        string str19 = dataRow["Field"].ToString();
                        strArray3[index17] = str19;
                        int index18 = 2;
                        string str20 = "=@";
                        strArray3[index18] = str20;
                        int index19 = 3;
                        string str21 = dataRow["Field"].ToString();
                        strArray3[index19] = str21;
                        int index20 = 4;
                        string str22 = "\");";
                        strArray3[index20] = str22;
                        string str23 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str23);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index21 = 0;
                        string str24 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index21] = str24;
                        int index22 = 1;
                        string str25 = dataRow["Field"].ToString();
                        strArray4[index22] = str25;
                        int index23 = 2;
                        string str26 = "\", new SqlXml(new XmlTextReader(";
                        strArray4[index23] = str26;
                        int index24 = 3;
                        string str27 = this._tableName;
                        strArray4[index24] = str27;
                        int index25 = 4;
                        string str28 = "_obj.";
                        strArray4[index25] = str28;
                        int index26 = 5;
                        string str29 = dataRow["Field"].ToString();
                        strArray4[index26] = str29;
                        int index27 = 6;
                        string str30 = ", XmlNodeType.Document, null)));";
                        strArray4[index27] = str30;
                        string str31 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str31);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index28 = 0;
                        string str32 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index28] = str32;
                        int index29 = 1;
                        string str33 = dataRow["Field"].ToString();
                        strArray5[index29] = str33;
                        int index30 = 2;
                        string str34 = "\"].MySqlDbType = ";
                        strArray5[index30] = str34;
                        int index31 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index31] = sqlCommandType;
                        int index32 = 4;
                        string str35 = ";";
                        strArray5[index32] = str35;
                        string str36 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str36);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "string")
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[5];
                        int index7 = 0;
                        string str8 = "\t\t\tif(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = "]\"))";
                        strArray2[index11] = str12;
                        string str13 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str13);
                        stringBuilder1.AppendLine("\t\t\t{");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index12 = 0;
                        string str14 = "\t\t\t\tif (string.IsNullOrEmpty(";
                        strArray3[index12] = str14;
                        int index13 = 1;
                        string str15 = this._tableName;
                        strArray3[index13] = str15;
                        int index14 = 2;
                        string str16 = "_obj.";
                        strArray3[index14] = str16;
                        int index15 = 3;
                        string str17 = dataRow["Field"].ToString();
                        strArray3[index15] = str17;
                        int index16 = 4;
                        string str18 = "))";
                        strArray3[index16] = str18;
                        string str19 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str19);
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        if (string.IsNullOrEmpty(dataRow["Default"].ToString()))
                        {
                            StringBuilder stringBuilder5 = stringBuilder1;
                            string[] strArray4 = new string[5];
                            int index17 = 0;
                            string str20 = "\t\t\t\t\t";
                            strArray4[index17] = str20;
                            int index18 = 1;
                            string str21 = this._tableName;
                            strArray4[index18] = str21;
                            int index19 = 2;
                            string str22 = "_obj.";
                            strArray4[index19] = str22;
                            int index20 = 3;
                            string str23 = dataRow["Field"].ToString();
                            strArray4[index20] = str23;
                            int index21 = 4;
                            string str24 = " = \"\";";
                            strArray4[index21] = str24;
                            string str25 = string.Concat(strArray4);
                            stringBuilder5.AppendLine(str25);
                        }
                        else
                        {
                            StringBuilder stringBuilder5 = stringBuilder1;
                            string[] strArray4 = new string[7];
                            int index17 = 0;
                            string str20 = "\t\t\t\t\t";
                            strArray4[index17] = str20;
                            int index18 = 1;
                            string str21 = this._tableName;
                            strArray4[index18] = str21;
                            int index19 = 2;
                            string str22 = "_obj.";
                            strArray4[index19] = str22;
                            int index20 = 3;
                            string str23 = dataRow["Field"].ToString();
                            strArray4[index20] = str23;
                            int index21 = 4;
                            string str24 = " = \"";
                            strArray4[index21] = str24;
                            int index22 = 5;
                            string str25 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                            strArray4[index22] = str25;
                            int index23 = 6;
                            string str26 = "\";";
                            strArray4[index23] = str26;
                            string str27 = string.Concat(strArray4);
                            stringBuilder5.AppendLine(str27);
                        }
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index24 = 0;
                        string str28 = "\t\t\t\tsqlSet.Append(\"";
                        strArray5[index24] = str28;
                        int index25 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray5[index25] = str29;
                        int index26 = 2;
                        string str30 = "=@";
                        strArray5[index26] = str30;
                        int index27 = 3;
                        string str31 = dataRow["Field"].ToString();
                        strArray5[index27] = str31;
                        int index28 = 4;
                        string str32 = "\");";
                        strArray5[index28] = str32;
                        string str33 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str33);
                        StringBuilder stringBuilder7 = stringBuilder1;
                        string[] strArray6 = new string[7];
                        int index29 = 0;
                        string str34 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray6[index29] = str34;
                        int index30 = 1;
                        string str35 = dataRow["Field"].ToString();
                        strArray6[index30] = str35;
                        int index31 = 2;
                        string str36 = "\", ";
                        strArray6[index31] = str36;
                        int index32 = 3;
                        string str37 = this._tableName;
                        strArray6[index32] = str37;
                        int index33 = 4;
                        string str38 = "_obj.";
                        strArray6[index33] = str38;
                        int index34 = 5;
                        string str39 = dataRow["Field"].ToString();
                        strArray6[index34] = str39;
                        int index35 = 6;
                        string str40 = ");";
                        strArray6[index35] = str40;
                        string str41 = string.Concat(strArray6);
                        stringBuilder7.AppendLine(str41);
                        StringBuilder stringBuilder8 = stringBuilder1;
                        string[] strArray7 = new string[5];
                        int index36 = 0;
                        string str42 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray7[index36] = str42;
                        int index37 = 1;
                        string str43 = dataRow["Field"].ToString();
                        strArray7[index37] = str43;
                        int index38 = 2;
                        string str44 = "\"].MySqlDbType = ";
                        strArray7[index38] = str44;
                        int index39 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray7[index39] = sqlCommandType;
                        int index40 = 4;
                        string str45 = ";";
                        strArray7[index40] = str45;
                        string str46 = string.Concat(strArray7);
                        stringBuilder8.AppendLine(str46);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                    else
                    {
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[5];
                        int index7 = 0;
                        string str8 = "\t\t\tif(";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = this._tableName;
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "_obj.ModifiedColumns.Contains(\"[";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = dataRow["Field"].ToString();
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = "]\"))";
                        strArray2[index11] = str12;
                        string str13 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str13);
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tif (sqlSet.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\t\tsqlSet.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\t}");
                        StringBuilder stringBuilder4 = stringBuilder1;
                        string[] strArray3 = new string[5];
                        int index12 = 0;
                        string str14 = "\t\t\t\tsqlSet.Append(\"";
                        strArray3[index12] = str14;
                        int index13 = 1;
                        string str15 = dataRow["Field"].ToString();
                        strArray3[index13] = str15;
                        int index14 = 2;
                        string str16 = "=@";
                        strArray3[index14] = str16;
                        int index15 = 3;
                        string str17 = dataRow["Field"].ToString();
                        strArray3[index15] = str17;
                        int index16 = 4;
                        string str18 = "\");";
                        strArray3[index16] = str18;
                        string str19 = string.Concat(strArray3);
                        stringBuilder4.AppendLine(str19);
                        StringBuilder stringBuilder5 = stringBuilder1;
                        string[] strArray4 = new string[7];
                        int index17 = 0;
                        string str20 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray4[index17] = str20;
                        int index18 = 1;
                        string str21 = dataRow["Field"].ToString();
                        strArray4[index18] = str21;
                        int index19 = 2;
                        string str22 = "\", ";
                        strArray4[index19] = str22;
                        int index20 = 3;
                        string str23 = this._tableName;
                        strArray4[index20] = str23;
                        int index21 = 4;
                        string str24 = "_obj.";
                        strArray4[index21] = str24;
                        int index22 = 5;
                        string str25 = dataRow["Field"].ToString();
                        strArray4[index22] = str25;
                        int index23 = 6;
                        string str26 = ");";
                        strArray4[index23] = str26;
                        string str27 = string.Concat(strArray4);
                        stringBuilder5.AppendLine(str27);
                        StringBuilder stringBuilder6 = stringBuilder1;
                        string[] strArray5 = new string[5];
                        int index24 = 0;
                        string str28 = "\t\t\t\tcmd.Parameters[\"@";
                        strArray5[index24] = str28;
                        int index25 = 1;
                        string str29 = dataRow["Field"].ToString();
                        strArray5[index25] = str29;
                        int index26 = 2;
                        string str30 = "\"].MySqlDbType = ";
                        strArray5[index26] = str30;
                        int index27 = 3;
                        string sqlCommandType = dbsTypeMap[dataRow["Type"].ToString()].SqlCommandType;
                        strArray5[index27] = sqlCommandType;
                        int index28 = 4;
                        string str31 = ";";
                        strArray5[index28] = str31;
                        string str32 = string.Concat(strArray5);
                        stringBuilder6.AppendLine(str32);
                        stringBuilder1.AppendLine("\t\t\t}");
                    }
                }
            }
            stringBuilder1.AppendLine("\t\t\tsql = string.Format(sql, sqlSet.ToString(), sqlWhere.ToString());");
            stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql;");
            stringBuilder1.AppendLine("\t\t\ttry");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\treturn new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tcatch(Exception e)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tif(XORM.Db.LogConfig.ThrowException)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\tthrow e;");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t\treturn -1;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t}");
            stringBuilder1.AppendLine("\t\t#endregion");
            return ((object)stringBuilder1).ToString();
        }
        #endregion

        #region 插入语句
        /// <summary>
        /// 插入语句
        /// </summary>
        /// <returns></returns>
        private string GetInsertContent()
        {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine("\t\t#region 插入");
            stringBuilder1.AppendLine("\t\t/// <summary>");
            stringBuilder1.AppendLine("\t\t/// 插入数据");
            stringBuilder1.AppendLine("\t\t/// </summary>");
            stringBuilder1.AppendLine("\t\t/// <returns></returns>");
            StringBuilder stringBuilder2 = stringBuilder1;
            string[] strArray1 = new string[6];
            int index1 = 0;
            string str1 = "\t\tpublic static bool insert( ";
            strArray1[index1] = str1;
            int index2 = 1;
            string str2 = this._NamespaceClasses;
            strArray1[index2] = str2;
            int index3 = 2;
            string str3 = this._tableName;
            strArray1[index3] = str3;
            int index4 = 3;
            string str4 = " ";
            strArray1[index4] = str4;
            int index5 = 4;
            string str5 = this._tableName;
            strArray1[index5] = str5;
            int index6 = 5;
            string str6 = "_obj)";
            strArray1[index6] = str6;
            string str7 = string.Concat(strArray1);
            stringBuilder2.AppendLine(str7);
            stringBuilder1.AppendLine("\t\t{");
            stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
            stringBuilder1.AppendLine("\t\t\tStringBuilder cols = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tStringBuilder parameters = new StringBuilder();");
            stringBuilder1.AppendLine("\t\t\tstring sql = \"INSERT INTO " + this._tableName + "({0}) values({1})\";");
            DBS_TypeMap dbsTypeMap = new DBS_TypeMap();
            foreach (DataRow dataRow in (InternalDataCollectionBase)this.DT.Rows)
            {
                if (!(dataRow["Extra"].ToString() == "auto_increment") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow["Type"].ToString()].DBType == "timestamp"))
                {
                    if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "DateTime")
                    {
                        if (dataRow["Null"].ToString() == "YES")
                        {
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[9];
                            int index7 = 0;
                            string str8 = "\t\t\tif (";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = " != null && ";
                            strArray2[index11] = str12;
                            int index12 = 5;
                            string str13 = this._tableName;
                            strArray2[index12] = str13;
                            int index13 = 6;
                            string str14 = "_obj.";
                            strArray2[index13] = str14;
                            int index14 = 7;
                            string str15 = dataRow["Field"].ToString();
                            strArray2[index14] = str15;
                            int index15 = 8;
                            string str16 = " > DateTime.MinValue)";
                            strArray2[index15] = str16;
                            string str17 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str17);
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index16 = 0;
                            string str18 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index16] = str18;
                            int index17 = 1;
                            string str19 = dataRow["Field"].ToString();
                            strArray3[index17] = str19;
                            int index18 = 2;
                            string str20 = "\", ";
                            strArray3[index18] = str20;
                            int index19 = 3;
                            string str21 = this._tableName;
                            strArray3[index19] = str21;
                            int index20 = 4;
                            string str22 = "_obj.";
                            strArray3[index20] = str22;
                            int index21 = 5;
                            string str23 = dataRow["Field"].ToString();
                            strArray3[index21] = str23;
                            int index22 = 6;
                            string str24 = ");";
                            strArray3[index22] = str24;
                            string str25 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str25);
                            stringBuilder1.AppendLine("\t\t\t}");
                            if (!string.IsNullOrEmpty(dataRow["Default"].ToString()))
                            {
                                stringBuilder1.AppendLine("\t\t\telse");
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "]\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                                if (dataRow["Default"].ToString().ToLower() == "(CURRENT_TIMESTAMP)")
                                {
                                    stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow["Field"].ToString() + "\", DateTime.Now);");
                                }
                                else
                                {
                                    StringBuilder stringBuilder5 = stringBuilder1;
                                    string[] strArray4 = new string[5];
                                    int index23 = 0;
                                    string str26 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                    strArray4[index23] = str26;
                                    int index24 = 1;
                                    string str27 = dataRow["Field"].ToString();
                                    strArray4[index24] = str27;
                                    int index25 = 2;
                                    string str28 = "\", DateTime.Parse(\"";
                                    strArray4[index25] = str28;
                                    int index26 = 3;
                                    string str29 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                    strArray4[index26] = str29;
                                    int index27 = 4;
                                    string str30 = "\"));";
                                    strArray4[index27] = str30;
                                    string str31 = string.Concat(strArray4);
                                    stringBuilder5.AppendLine(str31);
                                }
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                        }
                        else
                        {
                            stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[9];
                            int index7 = 0;
                            string str8 = "\t\t\tif(";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = " == null || ";
                            strArray2[index11] = str12;
                            int index12 = 5;
                            string str13 = this._tableName;
                            strArray2[index12] = str13;
                            int index13 = 6;
                            string str14 = "_obj.";
                            strArray2[index13] = str14;
                            int index14 = 7;
                            string str15 = dataRow["Field"].ToString();
                            strArray2[index14] = str15;
                            int index15 = 8;
                            string str16 = " == DateTime.MinValue)";
                            strArray2[index15] = str16;
                            string str17 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str17);
                            stringBuilder1.AppendLine("\t\t\t{");
                            if (dataRow["Default"].ToString().ToLower() == "(CURRENT_TIMESTAMP)")
                                stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow["Field"].ToString() + "\", DateTime.Now);");
                            else if (!string.IsNullOrEmpty(dataRow["Default"].ToString()))
                            {
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[5];
                                int index16 = 0;
                                string str18 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray3[index16] = str18;
                                int index17 = 1;
                                string str19 = dataRow["Field"].ToString();
                                strArray3[index17] = str19;
                                int index18 = 2;
                                string str20 = "\", DateTime.Parse(\"";
                                strArray3[index18] = str20;
                                int index19 = 3;
                                string str21 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                strArray3[index19] = str21;
                                int index20 = 4;
                                string str22 = "\"));";
                                strArray3[index20] = str22;
                                string str23 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str23);
                            }
                            else
                                stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow["Field"].ToString() + "\", DateTime.Parse(\"1900-01-01 00:00:00\"));");
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\telse");
                            stringBuilder1.AppendLine("\t\t\t{");
                            StringBuilder stringBuilder5 = stringBuilder1;
                            string[] strArray4 = new string[7];
                            int index21 = 0;
                            string str24 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray4[index21] = str24;
                            int index22 = 1;
                            string str25 = dataRow["Field"].ToString();
                            strArray4[index22] = str25;
                            int index23 = 2;
                            string str26 = "\", ";
                            strArray4[index23] = str26;
                            int index24 = 3;
                            string str27 = this._tableName;
                            strArray4[index24] = str27;
                            int index25 = 4;
                            string str28 = "_obj.";
                            strArray4[index25] = str28;
                            int index26 = 5;
                            string str29 = dataRow["Field"].ToString();
                            strArray4[index26] = str29;
                            int index27 = 6;
                            string str30 = ");";
                            strArray4[index27] = str30;
                            string str31 = string.Concat(strArray4);
                            stringBuilder5.AppendLine(str31);
                            stringBuilder1.AppendLine("\t\t\t}");
                        }
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].DBType.ToUpper() == "XML")
                    {
                        if (dataRow["isnullable"].ToString() == "1")
                        {
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[5];
                            int index7 = 0;
                            string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = "))";
                            strArray2[index11] = str12;
                            string str13 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str13);
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index12 = 0;
                            string str14 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index12] = str14;
                            int index13 = 1;
                            string str15 = dataRow["Field"].ToString();
                            strArray3[index13] = str15;
                            int index14 = 2;
                            string str16 = "\", new SqlXml(new XmlTextReader(";
                            strArray3[index14] = str16;
                            int index15 = 3;
                            string str17 = this._tableName;
                            strArray3[index15] = str17;
                            int index16 = 4;
                            string str18 = "_obj.";
                            strArray3[index16] = str18;
                            int index17 = 5;
                            string str19 = dataRow["Field"].ToString();
                            strArray3[index17] = str19;
                            int index18 = 6;
                            string str20 = ", XmlNodeType.Document, null)));";
                            strArray3[index18] = str20;
                            string str21 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str21);
                            stringBuilder1.AppendLine("\t\t\t}");
                        }
                        else
                        {
                            stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[5];
                            int index7 = 0;
                            string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = "))";
                            strArray2[index11] = str12;
                            string str13 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str13);
                            stringBuilder1.AppendLine("\t\t\t{");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index12 = 0;
                            string str14 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index12] = str14;
                            int index13 = 1;
                            string str15 = dataRow["Field"].ToString();
                            strArray3[index13] = str15;
                            int index14 = 2;
                            string str16 = "\", new SqlXml(new XmlTextReader(";
                            strArray3[index14] = str16;
                            int index15 = 3;
                            string str17 = this._tableName;
                            strArray3[index15] = str17;
                            int index16 = 4;
                            string str18 = "_obj.";
                            strArray3[index16] = str18;
                            int index17 = 5;
                            string str19 = dataRow["Field"].ToString();
                            strArray3[index17] = str19;
                            int index18 = 6;
                            string str20 = ", XmlNodeType.Document, null)));";
                            strArray3[index18] = str20;
                            string str21 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str21);
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\telse");
                            stringBuilder1.AppendLine("\t\t\t{");
                            if (!string.IsNullOrEmpty(dataRow["Default"].ToString()))
                            {
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[5];
                                int index19 = 0;
                                string str22 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index19] = str22;
                                int index20 = 1;
                                string str23 = dataRow["Field"].ToString();
                                strArray4[index20] = str23;
                                int index21 = 2;
                                string str24 = "\", new SqlXml(new XmlTextReader(";
                                strArray4[index21] = str24;
                                int index22 = 3;
                                string str25 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "");
                                strArray4[index22] = str25;
                                int index23 = 4;
                                string str26 = ", XmlNodeType.Document, null)));";
                                strArray4[index23] = str26;
                                string str27 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str27);
                            }
                            else
                                stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow["Field"].ToString() + "\", new SqlXml(new XmlTextReader(\"<?xml version=\\\"1.0\\\"?><Items></Items>\", XmlNodeType.Document, null)));");
                            stringBuilder1.AppendLine("\t\t\t}");
                        }
                    }
                    else if (dbsTypeMap[dataRow["Type"].ToString()].CodeType == "string")
                    {
                        if (dataRow["Null"].ToString() == "YES")
                        {
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[5];
                            int index7 = 0;
                            string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = "))";
                            strArray2[index11] = str12;
                            string str13 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str13);
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index12 = 0;
                            string str14 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index12] = str14;
                            int index13 = 1;
                            string str15 = dataRow["Field"].ToString();
                            strArray3[index13] = str15;
                            int index14 = 2;
                            string str16 = "\", ";
                            strArray3[index14] = str16;
                            int index15 = 3;
                            string str17 = this._tableName;
                            strArray3[index15] = str17;
                            int index16 = 4;
                            string str18 = "_obj.";
                            strArray3[index16] = str18;
                            int index17 = 5;
                            string str19 = dataRow["Field"].ToString();
                            strArray3[index17] = str19;
                            int index18 = 6;
                            string str20 = ");";
                            strArray3[index18] = str20;
                            string str21 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str21);
                            stringBuilder1.AppendLine("\t\t\t}");
                        }
                        else
                        {
                            stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                            StringBuilder stringBuilder3 = stringBuilder1;
                            string[] strArray2 = new string[5];
                            int index7 = 0;
                            string str8 = "\t\t\tif (!string.IsNullOrEmpty(";
                            strArray2[index7] = str8;
                            int index8 = 1;
                            string str9 = this._tableName;
                            strArray2[index8] = str9;
                            int index9 = 2;
                            string str10 = "_obj.";
                            strArray2[index9] = str10;
                            int index10 = 3;
                            string str11 = dataRow["Field"].ToString();
                            strArray2[index10] = str11;
                            int index11 = 4;
                            string str12 = "))";
                            strArray2[index11] = str12;
                            string str13 = string.Concat(strArray2);
                            stringBuilder3.AppendLine(str13);
                            stringBuilder1.AppendLine("\t\t\t{");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index12 = 0;
                            string str14 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index12] = str14;
                            int index13 = 1;
                            string str15 = dataRow["Field"].ToString();
                            strArray3[index13] = str15;
                            int index14 = 2;
                            string str16 = "\", ";
                            strArray3[index14] = str16;
                            int index15 = 3;
                            string str17 = this._tableName;
                            strArray3[index15] = str17;
                            int index16 = 4;
                            string str18 = "_obj.";
                            strArray3[index16] = str18;
                            int index17 = 5;
                            string str19 = dataRow["Field"].ToString();
                            strArray3[index17] = str19;
                            int index18 = 6;
                            string str20 = ");";
                            strArray3[index18] = str20;
                            string str21 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str21);
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\telse");
                            stringBuilder1.AppendLine("\t\t\t{");
                            if (!string.IsNullOrEmpty(dataRow["Default"].ToString()))
                            {
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[5];
                                int index19 = 0;
                                string str22 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index19] = str22;
                                int index20 = 1;
                                string str23 = dataRow["Field"].ToString();
                                strArray4[index20] = str23;
                                int index21 = 2;
                                string str24 = "\", \"";
                                strArray4[index21] = str24;
                                int index22 = 3;
                                string str25 = dataRow["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                strArray4[index22] = str25;
                                int index23 = 4;
                                string str26 = "\");";
                                strArray4[index23] = str26;
                                string str27 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str27);
                            }
                            else
                                stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow["Field"].ToString() + "\", \"\");");
                            stringBuilder1.AppendLine("\t\t\t}");
                        }
                    }
                    else
                    {
                        stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                        stringBuilder1.AppendLine("\t\t\t{");
                        stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                        stringBuilder1.AppendLine("\t\t\t}");
                        stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow["Field"].ToString() + "\");");
                        stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow["Field"].ToString() + "\");");
                        StringBuilder stringBuilder3 = stringBuilder1;
                        string[] strArray2 = new string[7];
                        int index7 = 0;
                        string str8 = "\t\t\tcmd.Parameters.AddWithValue(\"@";
                        strArray2[index7] = str8;
                        int index8 = 1;
                        string str9 = dataRow["Field"].ToString();
                        strArray2[index8] = str9;
                        int index9 = 2;
                        string str10 = "\", ";
                        strArray2[index9] = str10;
                        int index10 = 3;
                        string str11 = this._tableName;
                        strArray2[index10] = str11;
                        int index11 = 4;
                        string str12 = "_obj.";
                        strArray2[index11] = str12;
                        int index12 = 5;
                        string str13 = dataRow["Field"].ToString();
                        strArray2[index12] = str13;
                        int index13 = 6;
                        string str14 = ");";
                        strArray2[index13] = str14;
                        string str15 = string.Concat(strArray2);
                        stringBuilder3.AppendLine(str15);
                    }
                }
            }
            stringBuilder1.AppendLine("\t\t\tsql = string.Format(sql, cols.ToString(), parameters.ToString());");
            stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql;");
            stringBuilder1.AppendLine("\t\t\tbool b = true;");
            stringBuilder1.AppendLine("\t\t\ttry");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tint QueryCount = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecNonQuery(cmd);");
            stringBuilder1.AppendLine("\t\t\t\tif (QueryCount < 1)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\tb = false;");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\tcatch(Exception e)");
            stringBuilder1.AppendLine("\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\tif(XORM.Db.LogConfig.ThrowException)");
            stringBuilder1.AppendLine("\t\t\t\t{");
            stringBuilder1.AppendLine("\t\t\t\t\tthrow e;");
            stringBuilder1.AppendLine("\t\t\t\t}");
            stringBuilder1.AppendLine("\t\t\t\tb = false;");
            stringBuilder1.AppendLine("\t\t\t}");
            stringBuilder1.AppendLine("\t\t\treturn b;");
            stringBuilder1.AppendLine("\t\t}");
            if ((uint)this.DT.Select("Extra = 'auto_increment'").Length > 0U)
            {
                DataRow dataRow1 = this.DT.Select("Extra = 'auto_increment'")[0];
                string str8 = dataRow1["Field"].ToString();
                string index7 = dataRow1["Type"].ToString();
                stringBuilder1.AppendLine("");
                stringBuilder1.AppendLine("\t\t/// <summary>");
                stringBuilder1.AppendLine("\t\t/// 插入数据,返回自增列ID");
                stringBuilder1.AppendLine("\t\t/// </summary>");
                stringBuilder1.AppendLine("\t\t/// <returns></returns>");
                StringBuilder stringBuilder3 = stringBuilder1;
                string[] strArray2 = new string[10];
                int index8 = 0;
                string str9 = "\t\tpublic static bool Add( ";
                strArray2[index8] = str9;
                int index9 = 1;
                string str10 = this._NamespaceClasses;
                strArray2[index9] = str10;
                int index10 = 2;
                string str11 = this._tableName;
                strArray2[index10] = str11;
                int index11 = 3;
                string str12 = " ";
                strArray2[index11] = str12;
                int index12 = 4;
                string str13 = this._tableName;
                strArray2[index12] = str13;
                int index13 = 5;
                string str14 = "_obj, out ";
                strArray2[index13] = str14;
                int index14 = 6;
                string codeType = dbsTypeMap[index7].CodeType;
                strArray2[index14] = codeType;
                int index15 = 7;
                string str15 = " ";
                strArray2[index15] = str15;
                int index16 = 8;
                string str16 = str8;
                strArray2[index16] = str16;
                int index17 = 9;
                string str17 = ")";
                strArray2[index17] = str17;
                string str18 = string.Concat(strArray2);
                stringBuilder3.AppendLine(str18);
                stringBuilder1.AppendLine("\t\t{");
                stringBuilder1.AppendLine("\t\t\t" + str8 + " = 0;");
                stringBuilder1.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
                stringBuilder1.AppendLine("\t\t\tStringBuilder cols = new StringBuilder();");
                stringBuilder1.AppendLine("\t\t\tStringBuilder parameters = new StringBuilder();");
                stringBuilder1.AppendLine("\t\t\tstring sql = \"INSERT INTO " + this._tableName + "({0}) values({1});SELECT @@IDENTITY;\";");
                foreach (DataRow dataRow2 in (InternalDataCollectionBase)this.DT.Rows)
                {
                    if (!(dataRow2["Extra"].ToString() == "auto_increment") && !(dbsTypeMap[dataRow2["Type"].ToString()].DBType == "uniqueidentifier") && !(dbsTypeMap[dataRow2["Type"].ToString()].DBType == "timestamp"))
                    {
                        if (dbsTypeMap[dataRow2["Type"].ToString()].CodeType == "DateTime")
                        {
                            if (dataRow2["Null"].ToString() == "YES")
                            {
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[9];
                                int index18 = 0;
                                string str19 = "\t\t\tif (";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = " != null && ";
                                strArray3[index22] = str23;
                                int index23 = 5;
                                string str24 = this._tableName;
                                strArray3[index23] = str24;
                                int index24 = 6;
                                string str25 = "_obj.";
                                strArray3[index24] = str25;
                                int index25 = 7;
                                string str26 = dataRow2["Field"].ToString();
                                strArray3[index25] = str26;
                                int index26 = 8;
                                string str27 = " > DateTime.MinValue)";
                                strArray3[index26] = str27;
                                string str28 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str28);
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[7];
                                int index27 = 0;
                                string str29 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index27] = str29;
                                int index28 = 1;
                                string str30 = dataRow2["Field"].ToString();
                                strArray4[index28] = str30;
                                int index29 = 2;
                                string str31 = "\", ";
                                strArray4[index29] = str31;
                                int index30 = 3;
                                string str32 = this._tableName;
                                strArray4[index30] = str32;
                                int index31 = 4;
                                string str33 = "_obj.";
                                strArray4[index31] = str33;
                                int index32 = 5;
                                string str34 = dataRow2["Field"].ToString();
                                strArray4[index32] = str34;
                                int index33 = 6;
                                string str35 = ");";
                                strArray4[index33] = str35;
                                string str36 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str36);
                                stringBuilder1.AppendLine("\t\t\t}");
                                if (!string.IsNullOrEmpty(dataRow2["Default"].ToString()))
                                {
                                    stringBuilder1.AppendLine("\t\t\telse");
                                    stringBuilder1.AppendLine("\t\t\t{");
                                    stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                                    stringBuilder1.AppendLine("\t\t\t\t{");
                                    stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                                    stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                                    stringBuilder1.AppendLine("\t\t\t\t}");
                                    stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                    stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                    if (dataRow2["Default"].ToString().ToLower() == "(CURRENT_TIMESTAMP)")
                                    {
                                        stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow2["Field"].ToString() + "\", DateTime.Now);");
                                    }
                                    else
                                    {
                                        StringBuilder stringBuilder6 = stringBuilder1;
                                        string[] strArray5 = new string[5];
                                        int index34 = 0;
                                        string str37 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                        strArray5[index34] = str37;
                                        int index35 = 1;
                                        string str38 = dataRow2["Field"].ToString();
                                        strArray5[index35] = str38;
                                        int index36 = 2;
                                        string str39 = "\", DateTime.Parse(\"";
                                        strArray5[index36] = str39;
                                        int index37 = 3;
                                        string str40 = dataRow2["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                        strArray5[index37] = str40;
                                        int index38 = 4;
                                        string str41 = "\"));";
                                        strArray5[index38] = str41;
                                        string str42 = string.Concat(strArray5);
                                        stringBuilder6.AppendLine(str42);
                                    }
                                    stringBuilder1.AppendLine("\t\t\t}");
                                }
                            }
                            else
                            {
                                stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[9];
                                int index18 = 0;
                                string str19 = "\t\t\tif(";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = " == null || ";
                                strArray3[index22] = str23;
                                int index23 = 5;
                                string str24 = this._tableName;
                                strArray3[index23] = str24;
                                int index24 = 6;
                                string str25 = "_obj.";
                                strArray3[index24] = str25;
                                int index25 = 7;
                                string str26 = dataRow2["Field"].ToString();
                                strArray3[index25] = str26;
                                int index26 = 8;
                                string str27 = " == DateTime.MinValue)";
                                strArray3[index26] = str27;
                                string str28 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str28);
                                stringBuilder1.AppendLine("\t\t\t{");
                                if (dataRow2["Default"].ToString().ToLower() == "(CURRENT_TIMESTAMP)")
                                    stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow2["Field"].ToString() + "\", DateTime.Now);");
                                else if (!string.IsNullOrEmpty(dataRow2["Default"].ToString()))
                                {
                                    StringBuilder stringBuilder5 = stringBuilder1;
                                    string[] strArray4 = new string[5];
                                    int index27 = 0;
                                    string str29 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                    strArray4[index27] = str29;
                                    int index28 = 1;
                                    string str30 = dataRow2["Field"].ToString();
                                    strArray4[index28] = str30;
                                    int index29 = 2;
                                    string str31 = "\", DateTime.Parse(\"";
                                    strArray4[index29] = str31;
                                    int index30 = 3;
                                    string str32 = dataRow2["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                    strArray4[index30] = str32;
                                    int index31 = 4;
                                    string str33 = "\"));";
                                    strArray4[index31] = str33;
                                    string str34 = string.Concat(strArray4);
                                    stringBuilder5.AppendLine(str34);
                                }
                                else
                                    stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow2["Field"].ToString() + "\", DateTime.Parse(\"1900-01-01 00:00:00\"));");
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\telse");
                                stringBuilder1.AppendLine("\t\t\t{");
                                StringBuilder stringBuilder6 = stringBuilder1;
                                string[] strArray5 = new string[7];
                                int index32 = 0;
                                string str35 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray5[index32] = str35;
                                int index33 = 1;
                                string str36 = dataRow2["Field"].ToString();
                                strArray5[index33] = str36;
                                int index34 = 2;
                                string str37 = "\", ";
                                strArray5[index34] = str37;
                                int index35 = 3;
                                string str38 = this._tableName;
                                strArray5[index35] = str38;
                                int index36 = 4;
                                string str39 = "_obj.";
                                strArray5[index36] = str39;
                                int index37 = 5;
                                string str40 = dataRow2["Field"].ToString();
                                strArray5[index37] = str40;
                                int index38 = 6;
                                string str41 = ");";
                                strArray5[index38] = str41;
                                string str42 = string.Concat(strArray5);
                                stringBuilder6.AppendLine(str42);
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                        }
                        else if (dbsTypeMap[dataRow2["Type"].ToString()].DBType.ToUpper() == "XML")
                        {
                            if (dataRow2["isnullable"].ToString() == "1")
                            {
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[5];
                                int index18 = 0;
                                string str19 = "\t\t\tif (!string.IsNullOrEmpty(";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = "))";
                                strArray3[index22] = str23;
                                string str24 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str24);
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[7];
                                int index23 = 0;
                                string str25 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index23] = str25;
                                int index24 = 1;
                                string str26 = dataRow2["Field"].ToString();
                                strArray4[index24] = str26;
                                int index25 = 2;
                                string str27 = "\", new SqlXml(new XmlTextReader(";
                                strArray4[index25] = str27;
                                int index26 = 3;
                                string str28 = this._tableName;
                                strArray4[index26] = str28;
                                int index27 = 4;
                                string str29 = "_obj.";
                                strArray4[index27] = str29;
                                int index28 = 5;
                                string str30 = dataRow2["Field"].ToString();
                                strArray4[index28] = str30;
                                int index29 = 6;
                                string str31 = ", XmlNodeType.Document, null)));";
                                strArray4[index29] = str31;
                                string str32 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str32);
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                            else
                            {
                                stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[5];
                                int index18 = 0;
                                string str19 = "\t\t\tif (!string.IsNullOrEmpty(";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = "))";
                                strArray3[index22] = str23;
                                string str24 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str24);
                                stringBuilder1.AppendLine("\t\t\t{");
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[7];
                                int index23 = 0;
                                string str25 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index23] = str25;
                                int index24 = 1;
                                string str26 = dataRow2["Field"].ToString();
                                strArray4[index24] = str26;
                                int index25 = 2;
                                string str27 = "\", new SqlXml(new XmlTextReader(";
                                strArray4[index25] = str27;
                                int index26 = 3;
                                string str28 = this._tableName;
                                strArray4[index26] = str28;
                                int index27 = 4;
                                string str29 = "_obj.";
                                strArray4[index27] = str29;
                                int index28 = 5;
                                string str30 = dataRow2["Field"].ToString();
                                strArray4[index28] = str30;
                                int index29 = 6;
                                string str31 = ", XmlNodeType.Document, null)));";
                                strArray4[index29] = str31;
                                string str32 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str32);
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\telse");
                                stringBuilder1.AppendLine("\t\t\t{");
                                if (!string.IsNullOrEmpty(dataRow2["Default"].ToString()))
                                {
                                    StringBuilder stringBuilder6 = stringBuilder1;
                                    string[] strArray5 = new string[5];
                                    int index30 = 0;
                                    string str33 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                    strArray5[index30] = str33;
                                    int index31 = 1;
                                    string str34 = dataRow2["Field"].ToString();
                                    strArray5[index31] = str34;
                                    int index32 = 2;
                                    string str35 = "\", new SqlXml(new XmlTextReader(";
                                    strArray5[index32] = str35;
                                    int index33 = 3;
                                    string str36 = dataRow2["Default"].ToString().Replace("(", "").Replace(")", "");
                                    strArray5[index33] = str36;
                                    int index34 = 4;
                                    string str37 = ", XmlNodeType.Document, null)));";
                                    strArray5[index34] = str37;
                                    string str38 = string.Concat(strArray5);
                                    stringBuilder6.AppendLine(str38);
                                }
                                else
                                    stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow2["Field"].ToString() + "\", new SqlXml(new XmlTextReader(\"<?xml version=\\\"1.0\\\"?><Items></Items>\", XmlNodeType.Document, null)));");
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                        }
                        else if (dbsTypeMap[dataRow2["Type"].ToString()].CodeType == "string")
                        {
                            if (dataRow2["Null"].ToString() == "YES")
                            {
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[5];
                                int index18 = 0;
                                string str19 = "\t\t\tif (!string.IsNullOrEmpty(";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = "))";
                                strArray3[index22] = str23;
                                string str24 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str24);
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[7];
                                int index23 = 0;
                                string str25 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index23] = str25;
                                int index24 = 1;
                                string str26 = dataRow2["Field"].ToString();
                                strArray4[index24] = str26;
                                int index25 = 2;
                                string str27 = "\", ";
                                strArray4[index25] = str27;
                                int index26 = 3;
                                string str28 = this._tableName;
                                strArray4[index26] = str28;
                                int index27 = 4;
                                string str29 = "_obj.";
                                strArray4[index27] = str29;
                                int index28 = 5;
                                string str30 = dataRow2["Field"].ToString();
                                strArray4[index28] = str30;
                                int index29 = 6;
                                string str31 = ");";
                                strArray4[index29] = str31;
                                string str32 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str32);
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                            else
                            {
                                stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                                stringBuilder1.AppendLine("\t\t\t{");
                                stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                                stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                                StringBuilder stringBuilder4 = stringBuilder1;
                                string[] strArray3 = new string[5];
                                int index18 = 0;
                                string str19 = "\t\t\tif (!string.IsNullOrEmpty(";
                                strArray3[index18] = str19;
                                int index19 = 1;
                                string str20 = this._tableName;
                                strArray3[index19] = str20;
                                int index20 = 2;
                                string str21 = "_obj.";
                                strArray3[index20] = str21;
                                int index21 = 3;
                                string str22 = dataRow2["Field"].ToString();
                                strArray3[index21] = str22;
                                int index22 = 4;
                                string str23 = "))";
                                strArray3[index22] = str23;
                                string str24 = string.Concat(strArray3);
                                stringBuilder4.AppendLine(str24);
                                stringBuilder1.AppendLine("\t\t\t{");
                                StringBuilder stringBuilder5 = stringBuilder1;
                                string[] strArray4 = new string[7];
                                int index23 = 0;
                                string str25 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                strArray4[index23] = str25;
                                int index24 = 1;
                                string str26 = dataRow2["Field"].ToString();
                                strArray4[index24] = str26;
                                int index25 = 2;
                                string str27 = "\", ";
                                strArray4[index25] = str27;
                                int index26 = 3;
                                string str28 = this._tableName;
                                strArray4[index26] = str28;
                                int index27 = 4;
                                string str29 = "_obj.";
                                strArray4[index27] = str29;
                                int index28 = 5;
                                string str30 = dataRow2["Field"].ToString();
                                strArray4[index28] = str30;
                                int index29 = 6;
                                string str31 = ");";
                                strArray4[index29] = str31;
                                string str32 = string.Concat(strArray4);
                                stringBuilder5.AppendLine(str32);
                                stringBuilder1.AppendLine("\t\t\t}");
                                stringBuilder1.AppendLine("\t\t\telse");
                                stringBuilder1.AppendLine("\t\t\t{");
                                if (!string.IsNullOrEmpty(dataRow2["Default"].ToString()))
                                {
                                    StringBuilder stringBuilder6 = stringBuilder1;
                                    string[] strArray5 = new string[5];
                                    int index30 = 0;
                                    string str33 = "\t\t\t\tcmd.Parameters.AddWithValue(\"@";
                                    strArray5[index30] = str33;
                                    int index31 = 1;
                                    string str34 = dataRow2["Field"].ToString();
                                    strArray5[index31] = str34;
                                    int index32 = 2;
                                    string str35 = "\", \"";
                                    strArray5[index32] = str35;
                                    int index33 = 3;
                                    string str36 = dataRow2["Default"].ToString().Replace("(", "").Replace(")", "").Replace("'", "");
                                    strArray5[index33] = str36;
                                    int index34 = 4;
                                    string str37 = "\");";
                                    strArray5[index34] = str37;
                                    string str38 = string.Concat(strArray5);
                                    stringBuilder6.AppendLine(str38);
                                }
                                else
                                    stringBuilder1.AppendLine("\t\t\t\tcmd.Parameters.AddWithValue(\"@" + dataRow2["Field"].ToString() + "\", \"\");");
                                stringBuilder1.AppendLine("\t\t\t}");
                            }
                        }
                        else
                        {
                            stringBuilder1.AppendLine("\t\t\tif (cols.Length > 0)");
                            stringBuilder1.AppendLine("\t\t\t{");
                            stringBuilder1.AppendLine("\t\t\t\tcols.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t\tparameters.Append(\",\");");
                            stringBuilder1.AppendLine("\t\t\t}");
                            stringBuilder1.AppendLine("\t\t\tcols.Append(\"" + dataRow2["Field"].ToString() + "\");");
                            stringBuilder1.AppendLine("\t\t\tparameters.Append(\"@" + dataRow2["Field"].ToString() + "\");");
                            StringBuilder stringBuilder4 = stringBuilder1;
                            string[] strArray3 = new string[7];
                            int index18 = 0;
                            string str19 = "\t\t\tcmd.Parameters.AddWithValue(\"@";
                            strArray3[index18] = str19;
                            int index19 = 1;
                            string str20 = dataRow2["Field"].ToString();
                            strArray3[index19] = str20;
                            int index20 = 2;
                            string str21 = "\", ";
                            strArray3[index20] = str21;
                            int index21 = 3;
                            string str22 = this._tableName;
                            strArray3[index21] = str22;
                            int index22 = 4;
                            string str23 = "_obj.";
                            strArray3[index22] = str23;
                            int index23 = 5;
                            string str24 = dataRow2["Field"].ToString();
                            strArray3[index23] = str24;
                            int index24 = 6;
                            string str25 = ");";
                            strArray3[index24] = str25;
                            string str26 = string.Concat(strArray3);
                            stringBuilder4.AppendLine(str26);
                        }
                    }
                }
                stringBuilder1.AppendLine("\t\t\tsql = string.Format(sql, cols.ToString(), parameters.ToString());");
                stringBuilder1.AppendLine("\t\t\tcmd.CommandText = sql;");
                stringBuilder1.AppendLine("\t\t\tbool b = true;");
                stringBuilder1.AppendLine("\t\t\ttry");
                stringBuilder1.AppendLine("\t\t\t{");
                stringBuilder1.AppendLine("\t\t\t\tobject idobj = new " + this._NamespaceDbu + ".DBHelper(ConnectionConfigMark, false).ExecScalar(cmd);");
                if (dbsTypeMap[index7].CodeType == "Int64")
                    stringBuilder1.AppendLine("\t\t\t\t" + str8 + " = Convert.ToInt64(idobj);");
                else if (dbsTypeMap[index7].CodeType == "Int32")
                    stringBuilder1.AppendLine("\t\t\t\t" + str8 + " = Convert.ToInt32(idobj);");
                else if (dbsTypeMap[index7].CodeType == "Int16")
                    stringBuilder1.AppendLine("\t\t\t\t" + str8 + " = Convert.ToInt16(idobj);");
                stringBuilder1.AppendLine("\t\t\t\tif (" + str8 + " == 0)");
                stringBuilder1.AppendLine("\t\t\t\t{");
                stringBuilder1.AppendLine("\t\t\t\t\tb = false;");
                stringBuilder1.AppendLine("\t\t\t\t}");
                stringBuilder1.AppendLine("\t\t\t}");
                stringBuilder1.AppendLine("\t\t\tcatch(Exception e)");
                stringBuilder1.AppendLine("\t\t\t{");
                stringBuilder1.AppendLine("\t\t\t\tif(XORM.Db.LogConfig.ThrowException)");
                stringBuilder1.AppendLine("\t\t\t\t{");
                stringBuilder1.AppendLine("\t\t\t\t\tthrow e;");
                stringBuilder1.AppendLine("\t\t\t\t}");
                stringBuilder1.AppendLine("\t\t\t\tb = false;");
                stringBuilder1.AppendLine("\t\t\t}");
                stringBuilder1.AppendLine("\t\t\treturn b;");
                stringBuilder1.AppendLine("\t\t}");
            }
            stringBuilder1.AppendLine("\t\t#endregion");
            return ((object)stringBuilder1).ToString();
        }
        #endregion

        #region 参数准备
        /// <summary>
        /// 参数准备
        /// </summary>
        /// <returns></returns>
        private string GetParametersContent()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("\t\t#region 查询执行器构造");
            stringBuilder.AppendLine("\t\t/// <summary>");
            stringBuilder.AppendLine("\t\t/// 查询执行器构造");
            stringBuilder.AppendLine("\t\t/// </summary>");
            stringBuilder.AppendLine("\t\t/// <param name=\"sql\">完整SQL语句</param>");
            stringBuilder.AppendLine("\t\t/// <param name=\"ParamsList\">可选参数列表</param>");
            stringBuilder.AppendLine("\t\t/// <returns></returns>");
            stringBuilder.AppendLine("\t\tprivate static MySqlCommand BuildCommand(string sql, object[] ParamsList = null)");
            stringBuilder.AppendLine("\t\t{");
            stringBuilder.AppendLine("\t\t\tMySqlCommand cmd = new MySqlCommand();");
            stringBuilder.AppendLine("\t\t\tcmd.CommandText = sql;");
            stringBuilder.AppendLine("\t\t\tif (!string.IsNullOrEmpty(sql))");
            stringBuilder.AppendLine("\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\tList<string> ParameterList = new List<string>();");
            stringBuilder.AppendLine("\t\t\t\tRegex reg = new Regex(\"(@[0-9a-zA-Z_]{1,30})\", RegexOptions.IgnoreCase);");
            stringBuilder.AppendLine("\t\t\t\tMatchCollection mc = reg.Matches(sql);");
            stringBuilder.AppendLine("\t\t\t\tif (mc != null && mc.Count > 0)");
            stringBuilder.AppendLine("\t\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\t\tforeach (Match m in mc)");
            stringBuilder.AppendLine("\t\t\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\t\t\tif (!ParameterList.Contains(m.Groups[1].Value))");
            stringBuilder.AppendLine("\t\t\t\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\t\t\t\tParameterList.Add(m.Groups[1].Value);");
            stringBuilder.AppendLine("\t\t\t\t\t\t}");
            stringBuilder.AppendLine("\t\t\t\t\t}");
            stringBuilder.AppendLine("\t\t\t\t}");
            stringBuilder.AppendLine("\t\t\t\tif (ParameterList.Count > 0)");
            stringBuilder.AppendLine("\t\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\t\tint i = 0;");
            stringBuilder.AppendLine("\t\t\t\t\tforeach (string ParameterName in ParameterList)");
            stringBuilder.AppendLine("\t\t\t\t\t{");
            stringBuilder.AppendLine("\t\t\t\t\t\tcmd.Parameters.AddWithValue(ParameterName, ParamsList[i]);");
            stringBuilder.AppendLine("\t\t\t\t\t\ti++;");
            stringBuilder.AppendLine("\t\t\t\t\t}");
            stringBuilder.AppendLine("\t\t\t\t}");
            stringBuilder.AppendLine("\t\t\t}");
            stringBuilder.AppendLine("\t\t\treturn cmd;");
            stringBuilder.AppendLine("\t\t}");
            stringBuilder.AppendLine("\t\t#endregion");
            return ((object)stringBuilder).ToString();
        }
        #endregion
    }
}